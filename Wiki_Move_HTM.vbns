start "" "MxClasses\VBNetScript.exe" /path=%0
exit
MxClasses\DLL_WinForm2019m09d13\System.Drawing.dll
MxClasses\DLL_WinForm2019m09d13\System.Windows.Forms.dll
MxClasses\MxBaseEc12.vb
RetVal = Mx.Want.UITimer_to_Poll_FileDir_And_Move_errhnd()
End Function
End Class
End Namespace

'Namespace Mx
'    Module subs
'        Sub Main()
'            Dim RetVal = Mx.Want.UITimer_to_Poll_FileDir_And_Move_errhnd()
'            If Mx.AreEqual(RetVal, "QUIT") = False Then MsgBox(RetVal)
'        End Sub
'    End Module 'subs

'    Public Class Class1
'        Public Shared SourceFolder As String = My.Application.Info.DirectoryPath.Replace("\bin\Debug", "")
'        Public Shared SourcePath As String = "UrFolder\MyApp.exe"
'    End Class
'End Namespace 'Mx

Namespace Mx
    Public Class Want
        Const strLIT_WIKI_MOVE_5_SEC = "Wiki Move 5-Sec"
        Const strvLIT_USER_PROFILE_DOWNLOADS = "%USERPROFILE%\downloads"
        Const strLIT_STAR_DOT_HTM = "WikiMove_*-stamp-*.htm"
        Const strLIT_STAR_DOT_HTML = "WikiMove_*-stamp-*.html"
        Const strLIT_STAR_DOT_TWCODETXT = "WikiMove_*-stamp-*.twcode*.txt"

        Public Shared Sub UITimer_to_Poll_FileDir_And_Move(ur_ret As Strap)
            ur_ret.d("QUIT")
            Dim userbowl_cart = Have.UserBowl
            Dim uiform_title_bowlname = enmUN.uiform_title
            Dim strUI_FORM_TITLE = strLIT_WIKI_MOVE_5_SEC
            userbowl_cart.InsKey(uiform_title_bowlname, strUI_FORM_TITLE)
            userbowl_cart.InsKey(enmUN.poll_folder, glbl.gEnvironment.ExpandEnvironmentVariables(strvLIT_USER_PROFILE_DOWNLOADS))
            If glbl.gDiagnostics.IsRunningWindow(strUI_FORM_TITLE) Then
                glbl.gInteraction.AppActivate(strUI_FORM_TITLE)

            Else
                Dim objFORM = New Mx.WikiMove_Form()
                objFORM.Text = userbowl_cart.SelKey(enmUN.uiform_title).v(enmUB.contents)
                Call objFORM.Display_FolderList()
                objFORM.tmrFIVE_SEC.Start()
                Dim strNEW_DATA_FOLDER = glbl.gEnvironment.ExpandEnvironmentVariables(strvLIT_USER_PROFILE_DOWNLOADS)

                'System.Windows.Forms.Application.Run(objFORM) only works from a command line program with no forms open. VBNetScript already has a form open.
                Call objFORM.ShowDialog()
            End If 'gDiagnostics
        End Sub 'UITimer_to_Poll_FileDir_And_Move

        Public Shared Function UITimer_to_Poll_FileDir_And_Move_errhnd() As Strap
            Dim stpRET = Strapd()
            UITimer_to_Poll_FileDir_And_Move_errhnd = stpRET
            stpRET.d("QUIT")
            Dim objERR_LIST = New ErrListBase : Try
                Call UITimer_to_Poll_FileDir_And_Move(stpRET)

            Catch ex As System.Exception
                Call objERR_LIST.dError_Stack(ex)
            End Try

            If objERR_LIST.Found Then
                stpRET.Clear().d(objERR_LIST.ToString)
            End If
        End Function 'UITimer_to_Poll_FileDir_And_Move_errhnd

        Public Shared Sub Poll_FileDir_And_Move(ur_ui_form As WikiMove_Form)
            Dim userbowl_cart = Have.UserBowl
            Dim pollfolder_bowlname = enmUN.poll_folder
            Dim windows_fs_cart = Have.WindowsFS
            Dim filemove_cart = Have.FileMove
            Call ur_ui_form.Display_FolderList()
            filemove_cart.DelAll()
            windows_fs_cart.InsList_From_Windows(userbowl_cart.SelKey(pollfolder_bowlname).v(enmUB.contents), strLIT_STAR_DOT_HTM, System.IO.SearchOption.TopDirectoryOnly)
            filemove_cart.Apply(windows_fs_cart)
            windows_fs_cart.InsList_From_Windows(userbowl_cart.SelKey(pollfolder_bowlname).v(enmUB.contents), strLIT_STAR_DOT_HTML, System.IO.SearchOption.TopDirectoryOnly)
            filemove_cart.Apply(windows_fs_cart)
            windows_fs_cart.InsList_From_Windows(userbowl_cart.SelKey(pollfolder_bowlname).v(enmUB.contents), strLIT_STAR_DOT_TWCODETXT, System.IO.SearchOption.TopDirectoryOnly)
            filemove_cart.Apply(windows_fs_cart)
            filemove_cart.Move_Files()
            Dim report_output_bowlname = userbowl_cart.Apply(filemove_cart)
            Dim strREPORT_OUTPUT = userbowl_cart.SelKey(report_output_bowlname).v(enmUB.contents)
            If HasText(strREPORT_OUTPUT) Then
                ur_ui_form.txtOUTPUT.Text = strREPORT_OUTPUT & vbCrLf & ur_ui_form.txtOUTPUT.Text
                ur_ui_form.intSHOW_FORM = 1
            End If
        End Sub 'Poll_FileDir_And_Move

        Public Shared Sub Poll_FileDir_And_Move_errhnd(ur_ui_form As WikiMove_Form)
            Dim objERR_LIST = New ErrListBase : Try
                Call Poll_FileDir_And_Move(ur_ui_form:=ur_ui_form)

            Catch ex As System.Exception
                Call objERR_LIST.dError_Stack(ex)
            End Try

            If objERR_LIST.Found Then
                ur_ui_form.txtOUTPUT.Text = objERR_LIST.ToString & vbCrLf & ur_ui_form.txtOUTPUT.Text
                ur_ui_form.intSHOW_FORM = 1
            End If
        End Sub 'Poll_FileDir_And_Move_errhnd

        Public Class CombineTextOutput
            Public gText As Strap
            Public gFolderList As Sdata

            Public Sub New(ur_text As Strap, ur_folder_list As Sdata)
                Me.gText = ur_text
                Me.gFolderList = ur_folder_list
            End Sub
        End Class 'CombineTextOutput
    End Class 'sub_main

    Public Class WikiMove_Form
        Inherits System.Windows.Forms.Form

        Public tmrFIVE_SEC As System.Windows.Forms.Timer
        Public txtOUTPUT As System.Windows.Forms.TextBox
        Public intSHOW_FORM As Integer

        Public Sub New()
            Me.intSHOW_FORM = 1

            Me.Name = "Wiki_Move"
            Me.Size = New System.Drawing.Size(400, 400)
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen

            Me.txtOUTPUT = New System.Windows.Forms.TextBox()
            Me.txtOUTPUT.Name = "txtOUTPUT"
            Me.txtOUTPUT.Multiline = True
            Me.txtOUTPUT.ScrollBars = System.Windows.Forms.ScrollBars.Vertical
            Me.txtOUTPUT.Dock = System.Windows.Forms.DockStyle.Fill
            Me.Controls.Add(Me.txtOUTPUT)

            Me.tmrFIVE_SEC = New System.Windows.Forms.Timer()
            Me.tmrFIVE_SEC.Interval = 50
            AddHandler Me.tmrFIVE_SEC.Tick, AddressOf Timer1_Tick
        End Sub 'New

        Sub Display_FolderList()
            Dim userbowl_cart = Have.UserBowl
            Dim pollfolder_bowlname = enmUN.poll_folder
            If HasText(Me.txtOUTPUT.Text) = False Then
                Me.txtOUTPUT.Text = Strapd().dLine("Listening:").dS(userbowl_cart.SelKey(pollfolder_bowlname).v(enmUB.contents)).dLine().d(Me.txtOUTPUT.Text)
            End If
        End Sub 'Display_FolderList

        Sub Look_For_Files()
            Call Mx.Want.Poll_FileDir_And_Move_errhnd(Me)
        End Sub

        Sub Show_Saved()
            Dim userbowl_cart = Have.UserBowl
            Dim uiform_title_bowlname = enmUN.uiform_title
            If Me.intSHOW_FORM = 1 Then
                Me.WindowState = System.Windows.Forms.FormWindowState.Normal
                Call AppActivate(userbowl_cart.SelKey(uiform_title_bowlname).v(enmUB.contents))
                Me.tmrFIVE_SEC.Interval = 800
                Me.intSHOW_FORM = 2

            ElseIf Me.intSHOW_FORM = 2 Then
                Me.WindowState = System.Windows.Forms.FormWindowState.Minimized
                Me.intSHOW_FORM = 0

            ElseIf Me.intSHOW_FORM = 0 Then
                If Me.WindowState <> System.Windows.Forms.FormWindowState.Minimized Then
                    Me.intSHOW_FORM = 6
                End If

            Else
                Me.intSHOW_FORM -= 1
            End If
        End Sub 'Show_Saved

        Sub Timer1_Tick(sender As Object, e As System.EventArgs)
            Me.tmrFIVE_SEC.Stop()
            Me.tmrFIVE_SEC.Interval = 5000
            Call Look_For_Files()
            Call Show_Saved()
            Me.tmrFIVE_SEC.Start()
        End Sub 'Timer1_Tick
    End Class 'WikiMove_Form




    Public Class Have
        Partial Class sFileMove
            Public Sub Apply(ur_windows_fs_cart As Have.sWindowsFS)
                For Each strFILE_PATH In ur_windows_fs_cart.Sel_FileList
                    Dim flnFILE_NAME = FileNamed().d(strFILE_PATH)
					Dim sdaEXT_LIST = flnFILE_NAME.ExtList
					Dim strDEST_PATH_ENCODED_IN_NAME = flnFILE_NAME.Name.Substring("WikiMove_".Length)
                    Dim strDEST_PATH = strDEST_PATH_ENCODED_IN_NAME.Replace("-colon-", ":").Replace("-fslash-", "\")
                    Dim intSTAMP = InStr(strDEST_PATH, "-stamp-")
					strDEST_PATH = Left(strDEST_PATH, intSTAMP - 1)
					Dim strEXT = sdaEXT_LIST.Item(b0(sdaEXT_LIST.Count))
					If sdaEXT_LIST.Count > 1 Then
						Dim strEXT2 = sdaEXT_LIST.Item(b0(sdaEXT_LIST.Count - 1))
						If AreEqual(strEXT, ".txt") AndAlso
						  StartingWithText(strEXT2, ".twcode") Then
							strEXT = ".twcode.txt"
						End If
					End If 'sdaEXT_LIST
					
					strDEST_PATH &= strEXT
                    Me.Ins(
                        New rFileMove().
                        vt(enmFM.src_file_path, strFILE_PATH).
                        vt(enmFM.dest_file_path, strDEST_PATH)
                        )
                Next strFILE_PATH
            End Sub 'Apply ur_windows_fs_cart

            Public Sub Move_Files()
				Dim lstLEN = New System.Collections.Generic.List(Of Integer)
                For Each rowFILE In Me.SelAll
					Dim strFILE_PATH = rowFILE.v(enmFM.src_file_path)
					Dim intLEN = strFILE_PATH.Length
					If lstLEN.Contains(intLEN) = False Then
						lstLEN.Add(intLEN)
					End If
				Next rowFILE
				
				Call lstLEN.Sort()
				For Each intLEN In lstLEN
					For Each rowFILE In Me.SelAll
						Dim strFILE_PATH = rowFILE.v(enmFM.src_file_path)
						If strFILE_PATH.Length = intLEN Then
							Dim strDEST_PATH = rowFILE.v(enmFM.dest_file_path)
							glbl.gWindowsFS.Move(strFILE_PATH, strFILE_PATH & ".TDLY")
							glbl.gWindowsFS.Delete(strDEST_PATH)
							glbl.gWindowsFS.Move(strFILE_PATH & ".TDLY", strDEST_PATH)
						End IF 'strFILE_PATH
					Next rowFILE
				Next intLEN
            End Sub 'Move_Files
        End Class 'sFileMove

        Partial Class sUserBowl
            Public Function Apply(ur_filemove_cart As sFileMove) As enmUN.zreport_output
                Dim retKEY = enmUN.report_output
                Apply = retKEY
                Dim stpREPORT = Strapd()
                For Each rowFILE In ur_filemove_cart.SelAll
                    stpREPORT.dLine(Now.ToString("tt hh:mm:ss")).d(":").dS(rowFILE.v(enmFM.dest_file_path))
                Next rowFILE

                Me.SelKey(retKEY).v(enmUB.contents) = stpREPORT
            End Function 'Apply(ur_filemove_cart
        End Class 'sUserBowl
    End Class 'Have



    Partial Public Class Have
        Private Shared tblFileMove As sFileMove
        Private Shared tblUserBowl As sUserBowl

        <System.Diagnostics.DebuggerHidden()>
        Private Shared Sub Connect()
            If Have.tblUserBowl Is Nothing Then
                Have.tblFileMove = New sFileMove
                Have.tblUserBowl = New sUserBowl
            End If 'sdaTCOL_NAME
        End Sub 'Connect
    End Class 'Have

    Public Class enmFM
        Inherits bitBASE
        Public Shared src_file_path As enmFM = TRow(Of enmFM).glbl.NewBitBase()
        Public Shared dest_file_path As enmFM = TRow(Of enmFM).glbl.NewBitBase()
    End Class

    Partial Class Have
        <System.Diagnostics.DebuggerHidden()>
        Public Shared Function FileMove() As sFileMove
            Call Have.Connect()
            FileMove = Have.tblFileMove
        End Function

        Public Class rFileMove
            Inherits TRow(Of enmFM)

            <System.Diagnostics.DebuggerHidden()>
            Public Function vt(ur_enm As enmFM, ur_val As String) As rFileMove
                vt = Me
                Me.v(ur_enm) = ur_val
            End Function
        End Class 'rFileMove

        Public Class sFileMove
            Private ttb As Objlist(Of rFileMove)

            <System.Diagnostics.DebuggerHidden()>
            Public Sub New()
                Me.ttb = New Objlist(Of rFileMove)
            End Sub

            <System.Diagnostics.DebuggerHidden()>
            Public Sub DelAll()
                Me.ttb.Clear()
            End Sub

            <System.Diagnostics.DebuggerHidden()>
            Public Function Ins(ur_from As rFileMove) As rFileMove
                Ins = ur_from
                Dim ttbSEL = Me
                Me.ttb.Add(ur_from)
            End Function 'Ins

            Public ReadOnly Property SelAll() As Objlist(Of rFileMove)
                <System.Diagnostics.DebuggerHidden()>
                Get
                    SelAll = ttb
                End Get
            End Property 'SelAll

            <System.Diagnostics.DebuggerHidden()>
            Public Overloads Function ToString(ur_hdr As Boolean) As String
                Dim stpRET = Strapd() : For Each kvpREC In Me.ttb.kvp
                    stpRET.d(kvpREC.row.ToString((kvpREC.Indexb1 = 1) And ur_hdr))
                Next kvpREC : ToString = stpRET
            End Function 'ToString
            <System.Diagnostics.DebuggerHidden()>
            Public Function ToCbrd(ur_hdr As Boolean) As Integer
                ToCbrd = Mx.glbl.gCboard.SetText(Me.ToString(ur_hdr))
            End Function
        End Class 'sFileMove
    End Class 'Have

    Public Class enmUB
        Inherits bitBASE
        Public Shared bowl_name As enmUB = TRow(Of enmUB).glbl.NewBitBase()
        Public Shared contents As enmUB = TRow(Of enmUB).glbl.NewBitBase()
    End Class

    Public Class enmUN
        Inherits bitBASE
        Public Shared app_folder As enmUN = TRow(Of enmUN).glbl.NewBitBase()
        Public Shared app_name As enmUN = TRow(Of enmUN).glbl.NewBitBase()
        Public Shared app_path As enmUN = TRow(Of enmUN).glbl.NewBitBase()
        Public Shared cmdline_audit As enmUN = TRow(Of enmUN).glbl.NewBitBase()
        Public Shared cmdline_orig As enmUN = TRow(Of enmUN).glbl.NewBitBase()
        Public Shared cmdline_table As enmUN = TRow(Of enmUN).glbl.NewBitBase()
        Public Shared in_subfolder As enmUN = TRow(Of enmUN).glbl.NewBitBase()
        Public Shared from_messagebox As enmUN = TRow(Of enmUN).glbl.NewBitBase()
        Public Shared poll_folder As enmUN = TRow(Of enmUN).glbl.NewBitBase()
        Public Shared report_output As zreport_output = TRow(Of enmUN).glbl.Trbase(Of zreport_output).NewBitBase() : Public Class zreport_output : Inherits enmUN : End Class
        Public Shared uiform_title As enmUN = TRow(Of enmUN).glbl.NewBitBase()
    End Class

    Public Class enmUR
        Inherits bitBASE
        Public Shared Ok As enmUR = TRow(Of enmUR).glbl.NewBitBase()
        Public Shared Cancel As enmUR = TRow(Of enmUR).glbl.NewBitBase()
    End Class

    Partial Public Class Have
        <System.Diagnostics.DebuggerHidden()>
        Public Shared Function UserBowl() As sUserBowl
            Dim bolFIRST_INIT = (Have.tblUserBowl Is Nothing)
            Call Have.Connect()
            UserBowl = Have.tblUserBowl
            If bolFIRST_INIT Then
                Call Have.tblUserBowl.InsFrom_Application()
                'Have.tblUserBowl.InsKey(enmUN.cmdline_audit, "1")
                Call Have.tblUserBowl.Cboard_CmdlineAudit()
            End If
        End Function 'UserBowl

        Public Class rUserBowl
            Inherits TRow(Of enmUB)

            <System.Diagnostics.DebuggerHidden()>
            Public Function v_is(ur_enm As enmUB, ur_cmp As enmUR) As Boolean
                v_is = AreEqual(Me.v(ur_enm), ur_cmp.name)
            End Function

            <System.Diagnostics.DebuggerHidden()>
            Public Function vt(ur_enm As enmUB, ur_val As String) As rUserBowl
                vt = Me
                Me.v(ur_enm) = ur_val
            End Function
        End Class 'rUserBowl

        Public Class sUserBowl
            Private ttb As Objlist(Of rUserBowl)
            Private PK As Objlist(Of enmUB)

            <System.Diagnostics.DebuggerHidden()>
            Public Sub New()
                Me.ttb = New Objlist(Of rUserBowl)
                Me.PK = New Objlist(Of enmUB)
                Me.PK.Add(enmUB.bowl_name)
            End Sub

            <System.Diagnostics.DebuggerHidden()>
            Public Sub Cboard_CmdlineAudit()
                If HasText(Me.SelKey(enmUN.cmdline_audit).v(enmUB.contents)) Then
                    Dim strAUDIT = Me.ToString(True)
                    Dim ins_msg = Have.MessageBox.Ins(
                        New Have.rMessageBox().
                            vt(enmMB.title, Me.SelKey(enmUN.app_name).v(enmUB.contents)).
                            vt(enmMB.text, strAUDIT),
                        MsgBoxStyle.OkCancel
                        )
                    If ins_msg.vUserResponse = MsgBoxResult.Ok Then
                        Have.Clipboard.Ins(
                            New Have.rClipboard().
                            vt(enmCB.text, strAUDIT)
                            )
                    End If
                End If
            End Sub 'Cboard_CmdlineAudit

            <System.Diagnostics.DebuggerHidden()>
            Public Function Ins(ur_from As rUserBowl) As rUserBowl
                Ins = ur_from
                Dim ttbSEL = Me
                Dim stpPK_LIST = Strapd()
                For Each keyPK In Me.PK
                    Dim strCUR_KEY = ur_from.v(keyPK)
                    If stpPK_LIST.Length > 0 Then stpPK_LIST.d(", ")
                    stpPK_LIST.d(strCUR_KEY)
                    If HasText(strCUR_KEY) = False Then
                        Throw New System.Exception(Strapd().d(Me.GetType.Name).dS("PK value must have data:").dS(keyPK.name))
                    Else
                        ttbSEL = ttbSEL.Sel(keyPK, ur_from.v(keyPK))
                    End If
                Next keyPK

                If ttbSEL.SelAll.Count > 0 Then
                    Throw New System.Exception(Strapd().d(Me.GetType.Name).dS("must have unique PK values:").dS(stpPK_LIST.ToString))
                Else
                    Me.ttb.Add(ur_from)
                End If
            End Function 'Ins

            <System.Diagnostics.DebuggerHidden()>
            Public Function InsKey(ur_key As enmUN, ur_val As String) As rUserBowl
                Dim ret = Me.SelKey(ur_key)
                InsKey = ret
                If HasText(ret.v(enmUB.contents)) Then
                    Throw New System.Exception("Cannot insert duplicate key for key: " & ur_key.name)
                Else
                    ret.vt(enmUB.contents, ur_val)
                End If
            End Function

            <System.Diagnostics.DebuggerHidden()>
            Public Function InsKey(ur_key As enmUN, ur_val As enmUR) As rUserBowl
                InsKey = Me.InsKey(ur_key, ur_val.name)
            End Function 'InsKey

            <System.Diagnostics.DebuggerHidden()>
            Public Function InsFrom_Application() As rUserBowl
                Dim ret = New rUserBowl
                InsFrom_Application = ret
                Me.InsKey(enmUN.app_name, Mx.FileNamed().d(Mx.Class1.SourcePath).FileGroup)
                Me.InsKey(enmUN.app_path, Mx.Class1.SourcePath)
                Me.InsKey(enmUN.app_folder, Mx.Class1.SourceFolder)

                Dim arlCMD_RET = MxText.Cmdline_UB(Of enmUN, enmUB).CommandLine_UBParm(enmUB.bowl_name, enmUB.contents, System.Environment.CommandLine)
                Me.InsKey(enmUN.cmdline_orig, qs & System.Environment.CommandLine.Replace(qs, qs & qs) & qs)
                Me.InsKey(enmUN.cmdline_table, qs & arlCMD_RET.ttbCMD_PARM.ToString(True).Replace(qs, qs & qs) & qs)
                For Each rowFOUND In arlCMD_RET.ttbUB_PARM
                    Me.Ins(
                        New Have.rUserBowl().
                        vt(enmUB.bowl_name, rowFOUND.v(enmUB.bowl_name)).
                        vt(enmUB.contents, rowFOUND.v(enmUB.contents))
                        )
                Next
            End Function

            <System.Diagnostics.DebuggerHidden()>
            Public Function Sel(ur_col As enmUB, ur_value As String) As sUserBowl
                Dim retUB = New sUserBowl
                Sel = retUB
                For Each rowUB In Me.ttb
                    If AreEqual(rowUB.v(ur_col), ur_value) Then
                        retUB.Ins(rowUB)
                    End If
                Next
            End Function 'Sel

            Public ReadOnly Property SelAll() As Objlist(Of rUserBowl)
                <System.Diagnostics.DebuggerHidden()>
                Get
                    SelAll = ttb
                End Get
            End Property 'SelAll

            <System.Diagnostics.DebuggerHidden()>
            Public Function SelFirst() As rUserBowl
                If Me.ttb.Count = 0 Then
                    SelFirst = New rUserBowl()
                Else
                    SelFirst = Me.ttb.tr_b1(1)
                End If
            End Function

            <System.Diagnostics.DebuggerHidden()>
            Public Function SelKey(ur_key As enmUN) As rUserBowl
                Dim ret As rUserBowl = Nothing
                Mx.TRow(Of enmUN).glbl.RefKeys()
                Dim strUN = ur_key.name
                For Each row In Me.ttb
                    If AreEqual(row.v(enmUB.bowl_name), strUN) Then
                        ret = row
                        Exit For
                    End If
                Next

                If ret Is Nothing Then
                    ret = New rUserBowl
                    Me.ttb.Add(
                        ret.
                        vt(enmUB.bowl_name, ur_key.name)
                        )
                End If

                SelKey = ret
            End Function 'SelKey

            <System.Diagnostics.DebuggerHidden()>
            Public Overloads Function ToString(ur_hdr As Boolean) As String
                Dim stpRET = Strapd() : For Each kvpREC In Me.ttb.kvp
                    stpRET.d(kvpREC.row.ToString((kvpREC.Indexb1 = 1) And ur_hdr))
                Next kvpREC : ToString = stpRET
            End Function 'ToString
            <System.Diagnostics.DebuggerHidden()>
            Public Function ToCbrd(ur_hdr As Boolean) As Integer
                ToCbrd = Mx.glbl.gCboard.SetText(Me.ToString(ur_hdr))
            End Function
        End Class 'sUserBowl
    End Class 'UB, UN
End Namespace 'Mx
