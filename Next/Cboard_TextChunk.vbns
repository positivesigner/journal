start "" MxClasses\VBNetScript.exe %0
exit
MxClasses\MxBaseE7.vb

Dim boxText_Result = New Mx.boxReq_Text_Result(
	ur_to_cboard:=New Strap,
	ur_to_msgbox:=New Strap,
	ur_to_vbnsform:=New Strap,
	ur_from_cboard:=New Strap,
	ur_from_userdialog:=MsgBoxResult.Cancel
	)

Call Mx.sub_main.Proc_Exec(
	ret_box_text_result:=boxText_Result,
	ur_cboard:=New Mx.glbl.gCboard,
	ur_msg_box:=New Mx.glbl.gMsgBox,
	ur_code_folder:=Mx.Class1.SourcePath
	)

RetVal = boxText_Result.gTo_VbnsForm

End Function
End Class
End Namespace

Namespace Mx
    Public Class boxReq_Text_Result
        Public gTo_Cboard As Strap
        Public gTo_MsgBox As Strap
        Public gTo_VbnsForm As Strap
        Public gFrom_Cboard As Strap
        Public gFrom_UserDialog As iWrap(Of MsgBoxResult)

        Public Sub New(ur_to_cboard As Strap, ur_to_msgbox As Strap, ur_to_vbnsform As Strap, ur_from_cboard As Strap, ur_from_userdialog As MsgBoxResult)
            Me.gTo_Cboard = ur_to_cboard
            Me.gTo_MsgBox = ur_to_msgbox
            Me.gTo_VbnsForm = ur_to_vbnsform
            Me.gFrom_Cboard = ur_from_cboard
            Me.gFrom_UserDialog = New iWrap(Of MsgBoxResult)(ur_from_userdialog)
        End Sub
    End Class 'boxReq_Text_Result

    Public Class boxPE_List_Result
        Public gChunk_Table As Objlist(Of sln.CodeRow)
        Public gParms As sln.ParmsRow

        Public Sub New(ur_chunk_table As Objlist(Of sln.CodeRow), ur_parms As sln.ParmsRow)
            Me.gChunk_Table = ur_chunk_table
            Me.gParms = ur_parms
        End Sub
    End Class 'boxPE_List_Result

    Public Class sub_main
        Public Shared Sub Proc_Exec(ret_box_text_result As boxReq_Text_Result, ur_cboard As glbl.gCboard, ur_msg_box As glbl.gMsgBox, ur_code_folder As String)
            Dim boxLIST_RESULT = New boxPE_List_Result(
                ur_chunk_table:=New Objlist(Of sln.CodeRow),
                ur_parms:=New sln.ParmsRow()
                )

            ret_box_text_result.gTo_VbnsForm.d("Quit")
            Dim objERR_LIST = New ErrListBase : Try
                'List what resources to find
                'No command line; hard-coded paths
                ret_box_text_result.gFrom_Cboard.d(ur_cboard.GetText)
                Call sln.RsrcCompile.wParm_App_Name(
                    ret_parms_row:=boxLIST_RESULT.gParms,
                    ur_code_folder:=ur_code_folder
                    )

                'Collect what resources you have
                'Filter and group data into tables
                Call sln.RsrcCompile.wCode_Chunk(
                    ret_chunk_table:=boxLIST_RESULT.gChunk_Table,
                    ur_input_text:=ret_box_text_result.gFrom_Cboard
                    )

                'Create output you want
                Call sln.CreateOutputCompile.wComplie_MsgBoxText(
                    ret_to_msgbox:=ret_box_text_result.gTo_MsgBox,
                    ur_code_table:=boxLIST_RESULT.gChunk_Table
                    )

                Call sln.CreateOutputCompile.wUser_Response(
                    ret_from_userdialog:=ret_box_text_result.gFrom_UserDialog,
                    ur_to_msgbox:=ret_box_text_result.gTo_MsgBox,
                    ur_msg_box:=ur_msg_box,
                    ur_parms_row:=boxLIST_RESULT.gParms
                    )

                Call sln.CreateOutputCompile.wOutputCboardText(
                    ret_to_cboard:=ret_box_text_result.gTo_Cboard,
                    ur_from_userdialog:=ret_box_text_result.gFrom_UserDialog,
                    ur_to_msgbox:=ret_box_text_result.gTo_MsgBox,
                    ur_cboard:=ur_cboard
                    )

            Catch ex As System.Exception
                Call objERR_LIST.dError_Stack(ex)
            End Try

            If objERR_LIST.Found Then
                ret_box_text_result.gTo_VbnsForm.Clear().d(objERR_LIST.ToString)
            End If
        End Sub 'Proc_Exec
    End Class 'sub_main

    Public Class sln
        Public Enum enmCCol
            chunk_text
            flag_operator_found
            char_next_sprtr
            chunk_type
        End Enum 'enmCCol

        Public Class ChunkRow
            Inherits TRow(Of enmCCol)

            Public rem_text_index As Integer
        End Class 'ChunkRow

        Public Enum enmHCol
            code_type
            code_text
        End Enum 'enmHCol

        Public Class CodeRow
            Inherits TRow(Of enmHCol)

            Public Shared Function AddRow(ur_code_table As Objlist(Of CodeRow)) As CodeRow
                Dim retROW = New CodeRow
                AddRow = retROW
                ur_code_table.Add(retROW)
            End Function 'AddRow
        End Class 'CodeRow

        Public Enum enmPCol
            app_name
            notice_msg
        End Enum 'enmPCol

        Public Class ParmsRow
            Inherits TRow(Of enmPCol)
        End Class 'ParmsRow

        Public Class CreateOutputCompile
            Public Shared Sub wComplie_MsgBoxText(ret_to_msgbox As Strap, ur_code_table As Objlist(Of CodeRow))
                For Each kvpNAME In CodeRow.glbl.RefNames.kvp
                    If kvpNAME.Indexb1 > 1 Then
                        ret_to_msgbox.d(",")
                    End If

                    ret_to_msgbox.d(kvpNAME.v)
                Next kvpNAME
                'MsgBox(ur_code_table.count)
                For Each kvpCHUNK In ur_code_table.kvp
                    ret_to_msgbox.dLine(kvpCHUNK.Indexb1).d(qs).d(kvpCHUNK.row.v(enmHCol.code_type)).d(qs).d(kvpCHUNK.row.v(enmHCol.code_text))
                    'If kvpCHUNK.Indexb1 = 15 Then
                    '    MsgBox(Asc(Right(kvpCHUNK.row.v(enmHCol.code_text), 1)))
                    'End If
                Next
            End Sub 'wComplie_MsgBoxText

            Public Shared Sub wOutputCboardText(ret_to_cboard As Strap, ur_from_userdialog As iWrap(Of MsgBoxResult), ur_to_msgbox As Strap, ur_cboard As glbl.gCboard)
                If ur_from_userdialog.v = MsgBoxResult.Ok Then
                    ret_to_cboard = ur_to_msgbox
                    ur_cboard.SetText(ret_to_cboard)
                End If
            End Sub 'wOutputCboardText


            Public Shared Sub wUser_Response(ret_from_userdialog As iWrap(Of MsgBoxResult), ur_to_msgbox As Strap, ur_msg_box As glbl.gMsgBox, ur_parms_row As sln.ParmsRow)
                ret_from_userdialog.v = ur_msg_box.GetResult(ur_to_msgbox, MsgBoxStyle.OkCancel, ur_parms_row.v(enmPCol.app_name))
            End Sub
        End Class 'CreateOutputCompile

        Public Class RsrcCompile
            Public Shared Sub wParm_App_Name(ret_parms_row As sln.ParmsRow, ur_code_folder As String)
                Dim flnPATH = New MxText.FileName().d(ur_code_folder)
                ret_parms_row.v(enmPCol.app_name) = flnPATH.FileGroup
            End Sub

            Public Shared Sub wCode_Chunk(ret_chunk_table As Objlist(Of sln.CodeRow), ur_input_text As String)
                Call prv.wRecurse_CodeSplit(ret_chunk_table, ur_input_text)
            End Sub

            Private Class prv
                Public Enum enmCONTEXT
                    comment
                    cur_continue
                    cur_close
                    default_search
                    dquote
                    quote
                    text_data
                    wspace
                End Enum 'enmCONTEXT

                Public Class boxChunk_State
                    Public gContext As enmCONTEXT
                    Public gChunk_End As Integer
                    Public gSplit_Char As String
                    Public gStart_Index As Integer
                    Public gText_Orig As String

                    Public Sub New(ur_context As enmCONTEXT, ur_chunk_end As Integer, ur_split_char As String, ur_start_index As Integer, ur_text_orig As String)
                        Me.gContext = ur_context
                        Me.gChunk_End = ur_chunk_end
                        Me.gSplit_Char = ur_split_char
                        Me.gStart_Index = ur_start_index
                        Me.gText_Orig = ur_text_orig
                    End Sub
                End Class 'boxChunk_State

                Public Class boxChunk_Loop
                    Public gChar_Entry As Char
                    Public gSkip_Context As enmCONTEXT

                    Public Sub New(ur_char_entry As Char, ur_skip_context As enmCONTEXT)
                        Me.gChar_Entry = ur_char_entry
                        Me.gSkip_Context = ur_skip_context
                    End Sub
                End Class 'boxChunk_Loop

                Public Class boxSplit_State
                    Public gContext As enmCONTEXT
                    Public gRow As ChunkRow
                    Public gSplit As Integer
                    Public gText_Orig As String

                    Public Sub New(ur_context As enmCONTEXT, ur_row As ChunkRow, ur_split As Integer, ur_text_orig As String)
                        Me.gContext = ur_context
                        Me.gRow = ur_row
                        Me.gSplit = ur_split
                        Me.gText_Orig = ur_text_orig
                    End Sub
                End Class 'boxSplit_State

                '<System.Diagnostics.DebuggerHidden()> 
                Public Shared Sub gChunk_Next(ret_split_state As boxSplit_State, ur_large_text As String, ur_start_index As Integer, ur_context As enmCONTEXT)
                    Dim boxCHUNK = New boxChunk_State(
                        ur_context:=ur_context,
                        ur_chunk_end:=0,
                        ur_split_char:=mt,
                        ur_start_index:=ur_start_index,
                        ur_text_orig:=ur_large_text
                        )

                    If boxCHUNK.gContext = enmCONTEXT.default_search Then
                        boxCHUNK.gContext = prvChunkContext.gChunk_Type(boxCHUNK.gText_Orig, boxCHUNK.gStart_Index)
                    End If

                    ret_split_state.gRow.v(enmCCol.chunk_type) = "WS"
                    If boxCHUNK.gContext = enmCONTEXT.text_data Then
                        ret_split_state.gRow.v(enmCCol.chunk_type) = "TX"
                    End If

                    For CHRCTR = boxCHUNK.gStart_Index To boxCHUNK.gText_Orig.Length
                        Dim boxLOOP = New boxChunk_Loop(
                            ur_char_entry:=boxCHUNK.gText_Orig(b0(CHRCTR)),
                            ur_skip_context:=enmCONTEXT.cur_continue
                            )

                        boxLOOP.gChar_Entry = boxCHUNK.gText_Orig(b0(CHRCTR))
                        Select Case boxCHUNK.gContext
                            Case enmCONTEXT.comment
                                boxLOOP.gSkip_Context = prvChunkContext.CommentClose(boxCHUNK.gText_Orig, boxLOOP.gChar_Entry, CHRCTR)

                            Case enmCONTEXT.dquote, enmCONTEXT.quote
                                boxLOOP.gSkip_Context = prvChunkContext.QuoteSkip(boxCHUNK.gContext, boxCHUNK.gText_Orig, boxLOOP.gChar_Entry, CHRCTR)

                            Case enmCONTEXT.text_data
                                boxLOOP.gSkip_Context = prvChunkContext.TDataCombine(boxCHUNK.gText_Orig, boxLOOP.gChar_Entry, CHRCTR)

                            Case enmCONTEXT.wspace
                                boxLOOP.gSkip_Context = prvChunkContext.WSpaceCombine(boxCHUNK.gText_Orig, boxLOOP.gChar_Entry, CHRCTR)
                        End Select 'enmCONTEXT

                        Select Case boxLOOP.gSkip_Context
                            Case enmCONTEXT.cur_close
                                boxCHUNK.gChunk_End = CHRCTR
                                Exit For

                            Case enmCONTEXT.cur_continue

                            Case enmCONTEXT.text_data
                            Case enmCONTEXT.wspace

                            Case Else
                                CHRCTR = gChunk_Skip(boxCHUNK.gText_Orig, CHRCTR, boxLOOP.gSkip_Context)
                        End Select 'flgSKIP_CHUNK
                    Next CHRCTR

                    If boxCHUNK.gChunk_End = 0 Then
                        ret_split_state.gRow.v(enmCCol.chunk_text) = Mid(boxCHUNK.gText_Orig, boxCHUNK.gStart_Index)
                        ret_split_state.gRow.rem_text_index = boxCHUNK.gText_Orig.Length + 1

                    Else
                        ret_split_state.gRow.v(enmCCol.chunk_text) = Mid(boxCHUNK.gText_Orig, boxCHUNK.gStart_Index, boxCHUNK.gChunk_End - boxCHUNK.gStart_Index + 1)
                        ret_split_state.gRow.rem_text_index = boxCHUNK.gChunk_End + 1
                    End If 'intCHUNK_END
                End Sub 'gChunk_Next

                Private Class prvChunkContext
                    Const chrGR_THAN = ">"c
                    Const chrCR = vbCr
                    Const chrLF = vbLf
                    Const chrLS_THAN = "<"c
                    Const chrSP = Chr(32)
                    Const chrQS = Chr(34)
                    Const chrQT = "'"c
                    Const chrTAB = vbTab
                    Const lit_ls_than_excl_hyph_hyph = "<!--"

                    Public Shared Function gChunk_Type(ur_large_text As String, ur_start_index As Integer) As enmCONTEXT
                        gChunk_Type = enmCONTEXT.wspace
                        Dim chrNEXT = ur_large_text(b0(ur_start_index))
                        If (
                            chrNEXT <> chrSP AndAlso
                            chrNEXT <> chrCR AndAlso
                            chrNEXT <> chrLF AndAlso
                            chrNEXT <> chrTAB
                          ) Then
                            gChunk_Type = enmCONTEXT.text_data
                        End If
                    End Function 'gChunk_Type

                    <System.Diagnostics.DebuggerHidden()> Public Shared Function CommentClose(ur_large_text As String, ur_chr_entry As Char, ur_chrctr As Integer) As enmCONTEXT
                        CommentClose = enmCONTEXT.cur_continue
                        Select Case ur_chr_entry
                            Case chrGR_THAN
                                If ur_chrctr >= 3 AndAlso
                                  Mid(ur_large_text, ur_chrctr - 2, 3) = "-->" Then
                                    CommentClose = enmCONTEXT.cur_close
                                End If
                        End Select 'ur_chr
                    End Function 'CommentClose

                    <System.Diagnostics.DebuggerHidden()> Public Shared Function QuoteSkip(ur_context As enmCONTEXT, ur_large_text As String, ur_chr_entry As Char, ur_chrctr As Integer) As enmCONTEXT
                        QuoteSkip = enmCONTEXT.cur_continue
                        Dim objEXIT_CHAR = chrQS
                        If ur_context = enmCONTEXT.quote Then
                            objEXIT_CHAR = chrQT
                        End If

                        Select Case ur_chr_entry
                            Case objEXIT_CHAR
                                If ur_chrctr < ur_large_text.Length Then
                                    If Mid(ur_large_text, ur_chrctr + 1, 1) <> objEXIT_CHAR Then
                                        QuoteSkip = enmCONTEXT.cur_close
                                    End If

                                Else 'CHRCTR
                                    QuoteSkip = enmCONTEXT.cur_close
                                End If
                        End Select 'chrENTRY
                    End Function 'QuoteSkip

                    <System.Diagnostics.DebuggerHidden()> Public Shared Function TDataCombine(ur_large_text As String, ur_chr_entry As Char, ur_chrctr As Integer) As enmCONTEXT
                        TDataCombine = enmCONTEXT.cur_continue
                        Select Case ur_chr_entry
                            Case chrSP, chrLF, chrCR, chrTAB
                                TDataCombine = enmCONTEXT.wspace

                            Case chrQS
                                TDataCombine = enmCONTEXT.dquote

                            Case chrQT
                                TDataCombine = enmCONTEXT.quote

                            Case chrLS_THAN
                                Dim strCOMMENT_START = mt
                                If ur_chrctr + 3 <= ur_large_text.Length Then
                                    strCOMMENT_START = Mid(ur_large_text, ur_chrctr, 4)
                                End If

                                If strCOMMENT_START = lit_ls_than_excl_hyph_hyph Then
                                    TDataCombine = enmCONTEXT.comment
                                End If

                            Case Else
                                Dim chrNEXT = chrSP
                                If ur_chrctr < ur_large_text.Length Then
                                    chrNEXT = Mid(ur_large_text, ur_chrctr + 1, 1)
                                    If (
                                        chrNEXT = chrSP OrElse
                                        chrNEXT = chrCR OrElse
                                        chrNEXT = chrLF OrElse
                                        chrNEXT = chrTAB
                                      ) Then
                                        TDataCombine = enmCONTEXT.cur_close
                                    End If

                                Else 'ur_chrctr
                                    TDataCombine = enmCONTEXT.cur_close
                                End If
                        End Select 'ur_chr_entry
                    End Function 'TDataCombine

                    <System.Diagnostics.DebuggerHidden()> Public Shared Function WSpaceCombine(ur_large_text As String, ur_chr_entry As Char, ur_chrctr As Integer) As enmCONTEXT
                        WSpaceCombine = enmCONTEXT.cur_continue
                        Select Case ur_chr_entry
                            Case chrSP, chrLF, chrCR, chrTAB
                                Dim chrNEXT = chrSP
                                If ur_chrctr < ur_large_text.Length Then
                                    chrNEXT = Mid(ur_large_text, ur_chrctr + 1, 1)
                                    If (
                                        chrNEXT <> chrSP AndAlso
                                        chrNEXT <> chrCR AndAlso
                                        chrNEXT <> chrLF AndAlso
                                        chrNEXT <> chrTAB
                                      ) Then
                                        WSpaceCombine = enmCONTEXT.cur_close
                                    End If

                                Else 'ur_chrctr
                                    WSpaceCombine = enmCONTEXT.cur_close
                                End If

                            Case Else
                                WSpaceCombine = enmCONTEXT.text_data
                        End Select 'ur_chr_entry
                    End Function 'WSpaceCombine
                End Class 'prvChunkContext

                '<System.Diagnostics.DebuggerHidden()>
                Public Shared Function gChunk_Skip(ur_large_text As String, ur_char_index As Integer, ur_context As enmCONTEXT) As Integer
                    Dim boxSPLIT = New boxSplit_State(
                        ur_context:=ur_context,
                        ur_row:=New ChunkRow,
                        ur_split:=ur_char_index + 1,
                        ur_text_orig:=ur_large_text
                        )

                    Call gChunk_Next(
                        ret_split_state:=boxSPLIT,
                        ur_large_text:=boxSPLIT.gText_Orig,
                        ur_start_index:=boxSPLIT.gSplit,
                        ur_context:=boxSPLIT.gContext
                        )

                    gChunk_Skip = ur_char_index + boxSPLIT.gRow.v(enmCCol.chunk_text).Length
                End Function 'gChunk_Skip

                Public Shared Sub wRecurse_CodeSplit(ret_chunk_table As Objlist(Of sln.CodeRow), ur_source_text As String)
                    Dim boxSPLIT = New boxSplit_State(
                        ur_context:=enmCONTEXT.default_search,
                        ur_row:=New ChunkRow,
                        ur_split:=1,
                        ur_text_orig:=ur_source_text
                        )

                    'Dim intPREV_LINECTR = -100
                    'Dim dtePREV_DISP = System.DateTime.Now().AddSeconds(-10)
                    While boxSPLIT.gSplit <= boxSPLIT.gText_Orig.Length
                        Call prv.gChunk_Next(
                            ret_split_state:=boxSPLIT,
                            ur_large_text:=boxSPLIT.gText_Orig,
                            ur_start_index:=boxSPLIT.gSplit,
                            ur_context:=boxSPLIT.gContext
                            )

                        Dim trwCODE = CodeRow.AddRow(
                            ur_code_table:=ret_chunk_table
                            )

                        trwCODE.v(enmHCol.code_text) = boxSPLIT.gRow.v(enmCCol.chunk_text)
                        trwCODE.v(enmHCol.code_type) = boxSPLIT.gRow.v(enmCCol.chunk_type)

                        boxSPLIT.gSplit = boxSPLIT.gRow.rem_text_index
                        boxSPLIT.gContext = enmCONTEXT.wspace
                        If boxSPLIT.gRow.v(enmCCol.chunk_type) = "WS" Then
                            boxSPLIT.gContext = enmCONTEXT.text_data
                        End If
                    End While 'intCUR_SPLIT
                End Sub 'wRecurse_CodeSplit
            End Class 'prv
        End Class 'RsrcCompile
    End Class 'sln

    Public Class iWrap(Of T)
        Public v As T

        Public Sub New(ur_t As T)
            Me.v = ur_t
        End Sub
    End Class 'iWrap

    Partial Public Class glbl
        Public Class gCboard
            <System.Diagnostics.DebuggerHidden()> Public Function GetText() As String
                GetText = My.Computer.Clipboard.GetText
            End Function

            <System.Diagnostics.DebuggerHidden()> Public Sub SetText(ur_text As String)
                Call My.Computer.Clipboard.SetText(ur_text)
            End Sub
        End Class 'gCboard

        Public Class gMsgBox
            <System.Diagnostics.DebuggerHidden()> Public Function GetResult(ur_message As String, ur_style As MsgBoxStyle, ur_title As String) As MsgBoxResult
                GetResult = MsgBox(ur_message, ur_style, ur_title)
            End Function
        End Class 'gMsgBox
    End Class 'glbl
End Namespace 'Mx
