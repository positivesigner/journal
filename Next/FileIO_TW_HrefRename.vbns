start "" MxClasses\VBNetScript.exe %0
exit
C:\TJBF\zPortableInstalls\VBNetScript\MxClasses\MxBaseE7.vb
            Dim retOUTPUT = New Mx.sub_main.CombineTextOutput(New Strap, New Mx.glbl.gFileIo, New Mx.glbl.gVisualBasic)
            retOUTPUT = Mx.sub_main.Proc_Exec(retOUTPUT, Mx.Class1.SourcePath)
            RetVal = retOUTPUT.gText
End Function
End Class
End Namespace

Namespace Mx
    Public Class sub_main
        Public Shared Function Proc_Exec(ret_combine_output As CombineTextOutput, ur_code_folder As String) As CombineTextOutput
            Proc_Exec = ret_combine_output
            'ret_combine_output.gText.d("Quit")
            Dim objERR_LIST = New ErrListBase : Try
                'List what resources to find
                'No command line; hard-coded paths
                Dim strOUTPUT_FILE_SUFFIX = ".html"
                Dim trwPARMS = New sln.ParmsRow()
                Dim objHTML_COMBINE = New Sdata
                Dim stpOUTPUT_TEXT = Strapd()
                trwPARMS = sln.RsrcCompile.wParm_App_Name(trwPARMS, ur_code_folder)
                'Collect what resources you have
                trwPARMS = sln.RsrcCompile.wParm_InputFile_Path(trwPARMS, ret_combine_output.gVisualBasic)
                trwPARMS = sln.RsrcCompile.wParm_OutputFile_Path(trwPARMS, strOUTPUT_FILE_SUFFIX)
                'Filter and group data into tables
                objHTML_COMBINE = sln.RsrcCompile.wHtml_Code_Text(objHTML_COMBINE, trwPARMS, ret_combine_output.gFileIo)
                'Create output you want
                stpOUTPUT_TEXT = sln.CreateOutputCompile.wComplie_OutputText(stpOUTPUT_TEXT, trwPARMS, objHTML_COMBINE)
                ret_combine_output.gFileIo = sln.CreateOutputCompile.wOutputFile(ret_combine_output.gFileIo, trwPARMS, stpOUTPUT_TEXT)

            Catch ex As System.Exception
                Call objERR_LIST.dError_Stack(ex)
            End Try

            If objERR_LIST.Found Then
                ret_combine_output.gText.Clear().d(objERR_LIST.ToString)
            End If
        End Function 'Proc_Exec

        Public Class CombineTextOutput
            Public gFileIo As glbl.gFileIo
            Public gText As Strap
            Public gVisualBasic As glbl.gVisualBasic

            Public Sub New(ur_text As Strap, ur_file_io As glbl.gFileIo, ur_visual_basic As glbl.gVisualBasic)
                Me.gText = ur_text
                Me.gFileIo = ur_file_io
                Me.gVisualBasic = ur_visual_basic
            End Sub
        End Class 'CombineTextOutput
    End Class 'sub_main

    Public Class sln
        Public Enum enmPCol
            app_name
            inputfile_path
            outputfile_path
            notice_msg
        End Enum 'enmPCol

        Public Class ParmsRow
            Inherits TRow(Of enmPCol)
        End Class 'ParmsRow

        Public Class CreateOutputCompile
            Public Shared Function wComplie_OutputText(ret_notice_msg As Strap, ur_parms_row As ParmsRow, ur_html_table As Sdata) As Strap
                wComplie_OutputText = ret_notice_msg
                'Dim intSIZE = 0
                For Each strLINE In ur_html_table
                    'If CInt(strLINE) > intSIZE Then
                    'intSIZE = CInt(strLINE)
                    'End If
                    ret_notice_msg.dLine(strLINE)
                Next
                'ret_notice_msg.dLine(intSIZE.ToString)
            End Function 'wComplie_OutputText

            Public Shared Function wOutputFile(ret_file_io As glbl.gFileIo, ur_params_row As ParmsRow, ur_notice_msg As Strap) As glbl.gFileIo
                wOutputFile = ret_file_io
                ret_file_io.WriteAllText(ur_params_row.v(enmPCol.outputfile_path), ur_notice_msg)
            End Function
        End Class 'CreateOutputCompile

        Public Class RsrcCompile
            Public Shared Function wParm_App_Name(ret_parms_row As ParmsRow, ur_code_folder As String) As ParmsRow
                wParm_App_Name = ret_parms_row
                Dim flnPATH = New MxText.FileName().d(ur_code_folder)
                ret_parms_row.v(enmPCol.app_name) = flnPATH.FileGroup
            End Function 'wParm_App_Name

            Public Shared Function wParm_InputFile_Path(ret_parms_row As ParmsRow, ur_visual_basic As glbl.gVisualBasic) As ParmsRow
                wParm_InputFile_Path = ret_parms_row
                ret_parms_row.v(enmPCol.inputfile_path) = ur_visual_basic.InputBox(ret_parms_row.v(enmPCol.app_name), "Which file path to process?")
            End Function

            Public Shared Function wParm_OutputFile_Path(ret_parms_row As ParmsRow, ur_outputfile_suffix As String) As ParmsRow
                wParm_OutputFile_Path = ret_parms_row
                Dim strNEW_PATH = (ret_parms_row.v(enmPCol.inputfile_path) & ur_outputfile_suffix).Replace(".htm.html", ".html")
                ret_parms_row.v(enmPCol.outputfile_path) = strNEW_PATH
            End Function 'wParm_OutputFile_Path

            Public Shared Function wHtml_Code_Text(ret_html_combine As Sdata, ur_parms_row As ParmsRow, ur_file_io As glbl.gFileIo) As Sdata
                wHtml_Code_Text = ret_html_combine
                Dim strFILE_TEXT = mt
                Dim strINPUT_FILE_PATH = ur_parms_row.v(enmPCol.inputfile_path)
                If ur_file_io.Exists(strINPUT_FILE_PATH) Then
                    For Each strLINE In ur_file_io.ReadAllText(strINPUT_FILE_PATH).Replace(vbCr, mt).Replace("<div style=""float:right""><button class=""tc-btn-invisible"">" & vbLf &
"&gt;&gt;", "<div style=""float:right""><a href=""#""><button class=""tc-btn-invisible"">" & vbLf &
"&lt;&lt;").Split(vbLf(0))
                        ret_html_combine.d(prv.Fix_Line_Href(strLINE))
                    Next
                End If 'ur_file_io
            End Function 'wHtml_Code_Text

            Private Class prv
                Const chrQMARK = "?"
                Const lit_href_qs = " href="""
                Const lit_a_name_qs = "<a name="""
                Const lit_hex_qmark = "%3F" '"%" & Conversion.Hex(Asc("?"))
                Const lit_hex_space = "%20" '"%" & Conversion.Hex(Asc(s))

                Public Shared Function Fix_Line_Href(ur_line As String) As String
                    Dim strRET = ur_line
                    Dim strREM_SEARCH = strRET

                    Dim intFOUND_INDEX = 0
                    Dim intPREV_INDEX = 1
                    While True
                        intFOUND_INDEX = InStr(intPREV_INDEX, strRET, lit_href_qs)
                        If intFOUND_INDEX > 0 Then
                            intFOUND_INDEX += lit_href_qs.Length
                            strREM_SEARCH = Mid(strRET, intFOUND_INDEX)
                            strREM_SEARCH = prv.Fix_Loc_Href(strREM_SEARCH)
                            strRET = Mid(strRET, 1, intFOUND_INDEX - 1) & strREM_SEARCH
                            If strRET.Length > ur_line.Length + 10000 Then
                                Exit While
                            End If
                            intPREV_INDEX = intFOUND_INDEX
                        End If

                        If intFOUND_INDEX = 0 Then
                            intFOUND_INDEX = InStr(intPREV_INDEX, strRET, lit_a_name_qs)
                            If intFOUND_INDEX > 0 Then
                                intFOUND_INDEX += lit_a_name_qs.Length
                                strREM_SEARCH = Mid(strRET, intFOUND_INDEX)
                                strREM_SEARCH = prv.Fix_Loc_AName(strREM_SEARCH)
                                strRET = Mid(strRET, 1, intFOUND_INDEX - 1) & strREM_SEARCH
                                If strRET.Length > ur_line.Length + 10000 Then
                                    Exit While
                                End If
                                intPREV_INDEX = intFOUND_INDEX
                            End If
                        End If

                        If intFOUND_INDEX = 0 Then
                            Exit While
                        End If
                    End While 'intFOUND_INDEX

                    Fix_Line_Href = strRET.Replace("<button aria-label=""show sidebar""", "<a href=""#""><button aria-label=""show sidebar""").Replace("</svg></button>", "</svg></button></a>")
                End Function 'Fix_Line_Href

                Public Shared Function Fix_Loc_AName(ur_line As String) As String
                    Dim strRET = ur_line
                    Dim intFOUND_START_QS = 1
                    Dim intFOUND_END_QS = InStr(intFOUND_START_QS, strRET, qs)
                    Dim intLINK_LENGTH = intFOUND_END_QS - intFOUND_START_QS
                    Dim strHLINK = Mid(strRET, intFOUND_START_QS, intLINK_LENGTH)
                    strHLINK = strHLINK.Replace(s, mt).Replace(chrQMARK, mt)
                    strRET = Mid(strRET, 1, intFOUND_START_QS - 1) & strHLINK & Mid(strRET, intFOUND_END_QS)
                    Fix_Loc_AName = strRET
                End Function 'Fix_Loc_AName

                Public Shared Function Fix_Loc_Href(ur_line As String) As String
                    Dim strRET = ur_line
                    Dim intFOUND_START_QS = 1
                    Dim intFOUND_END_QS = InStr(intFOUND_START_QS, strRET, qs)
                    Dim intLINK_LENGTH = intFOUND_END_QS - intFOUND_START_QS
                    Dim strHLINK = Mid(strRET, intFOUND_START_QS, intLINK_LENGTH)
                    strHLINK = strHLINK.Replace(lit_hex_qmark, mt).Replace(lit_hex_space, mt).Replace(".htm", ".html")
                    strRET = Mid(strRET, 1, intFOUND_START_QS - 1) & strHLINK & Mid(strRET, intFOUND_END_QS)
                    Fix_Loc_Href = strRET
                End Function 'Fix_Loc_Href
            End Class 'prv
        End Class 'RsrcCompile
    End Class 'sln

    Partial Public Class glbl
        Public Class gFileIo
            <System.Diagnostics.DebuggerHidden()> Public Function Exists(ur_path As String) As Boolean
                Exists = System.IO.File.Exists(ur_path)
            End Function

            <System.Diagnostics.DebuggerHidden()> Public Function ReadAllText(ur_path As String) As String
                ReadAllText = System.IO.File.ReadAllText(ur_path, Mx.gUTF8_FileEncoding)
            End Function

            <System.Diagnostics.DebuggerHidden()> Public Sub WriteAllText(ur_path As String, ur_text As String)
                System.IO.File.WriteAllText(ur_path, ur_text, Mx.gUTF8_FileEncoding)
            End Sub
        End Class 'gFileIo
        Public Class gVisualBasic
            <System.Diagnostics.DebuggerHidden()> Public Function InputBox(ur_title As String, ur_prompt As String) As String
                InputBox = Microsoft.VisualBasic.InputBox(ur_prompt, ur_title)
            End Function
        End Class 'gVisualBasic
    End Class 'glbl
End Namespace 'Mx
