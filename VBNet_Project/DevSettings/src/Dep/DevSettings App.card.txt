

$:/config/AutoSave

no



$:/config/MissingLinks

no



$:/config/Navigation/openLinkFromOutsideRiver

bottom



$:/config/Navigation/Permalinkview/CopyToClipboard

no



$:/config/RelinkOnRename

no



$:/config/ShortcutInfo/font-large



$:/config/ShortcutInfo/font-normal



$:/config/ShortcutInfo/home-tiddlers



$:/config/ShortcutInfo/save-all-changes



$:/config/shortcuts/font-large

ctrl-shift-Quote



$:/config/shortcuts/font-normal

ctrl-shift-Comma



$:/config/shortcuts/home-tiddlers

alt-H



$:/config/shortcuts/save-all-changes

alt-S



$:/config/TextEditor/EnableToolbar

no



$:/config/WikiParserRules/Inline/wikilink

disable



$:/DefaultTiddlers

[all[tiddlers]tag[INDEX]sort[title]]



$:/plugins/danielo515/searchNreplace

{
    "tiddlers": {
        "$:/danielo515/modules/startup/replace.js": {
            "text": "/*\\\r\ntitle: $:/danielo515/modules/startup/replace.js\r\ntype: application/javascript\r\nmodule-type: startup\r\nSearch and replace text\r\n\r\nRequires TW >= 5.1.4\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n// Export name and synchronous status\r\nexports.name = \"password\";\r\nexports.platforms = [\"browser\"];\r\nexports.after = [\"startup\"];\r\nexports.synchronous = true;\r\n\r\nexports.startup = function() {\r\n  $tw.rootWidget.addEventListener(\"tm-replace\",function(event){\r\n  console.log(JSON.stringify(event));\r\n  var text=$tw.wiki.getTiddlerText(event.paramObject.source) || \"\",\r\n      doGlobal = event.paramObject.global || \"yes\", // by default do global search and replace\r\n      modifiers = ( doGlobal.toLowerCase() === \"no\" ? '' : 'g'),\r\n      doRegex= event.paramObject.regex === \"yes\",\r\n      regex = new RegExp(doRegex ? event.paramObject.search : $tw.utils.escapeRegExp(event.paramObject.search), modifiers),\r\n      //Tiddler to store the result, if not provided use the source\r\n      destination = event.paramObject.destination || event.paramObject.source;\r\n      $tw.wiki.setText(destination,\"text\",null,text.replace(regex,event.paramObject.replace));\r\n\r\n  });\r\n};\r\n\r\n})();",
            "title": "$:/danielo515/modules/startup/replace.js",
            "type": "application/javascript",
            "module-type": "startup"
        },
        "$:/plugins/danielo515/searchNreplace/readme": {
            "title": "$:/plugins/danielo515/searchNreplace/readme",
            "text": "This is searchNreplace plugin for ~TiddlyWiki.\r\nIt provides an additional controls bar on the default tiddler's editor. Currently it only allows you to search and replace text.\n\n!!Basic usage\r\n# Put what you want to replace in the first field. This is the ''search string''.\r\n# Put what you want to put in place of the search string in the second field.\r\n# Select if you want to do want replace all occurrences by checking the global checkbox.\r\n# Click the replace button.\n\n!!Using regular expressions\r\nSince version 1.2 you are able to use reuglar expressions. To do so just check the `Use regex` checkbox. This allows you to powerfull search and replacements.\n\nYou can also use references on your replace string. Use `$1`...`$N` notation to reference capturing groups.\n\nFor example, if you have a list like this\n\n```\r\nA 10\r\nB 02\r\nC 20\r\nD 35\r\n```\n\nand you want to invert the values, use the following parameters:\r\n* ''search'': `(\\w) (\\d+)`\r\n* ''replace'': `$2 $1`\r\nThis will put what you have captured in the second ''capturing group'' first and the first one in the second place.\n\nThe regular expressions should be valid javascript regular expressions.\n\n!!Requirements\r\nIt ''requires'' at least TW5 core to 5.1.4 or newer.\r\n"
        },
        "$:/plugins/danielo515/searchNreplace/ui/controls": {
            "created": "20150409175313556",
            "list-after": "$:/core/ui/EditTemplate/tags",
            "modified": "20150409182902159",
            "tags": "$:/tags/EditTemplate",
            "title": "$:/plugins/danielo515/searchNreplace/ui/controls",
            "type": "text/vnd.tiddlywiki",
            "text": "<div class=\"tc-edit-controls\">\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/EditControls]]\" variable=\"control\">\n<$transclude tiddler=<<control>>>\n</$list>\n</div>"
        },
        "$:/plugins/danielo515/searchNreplace/ui/controls/replace": {
            "created": "20150409182035279",
            "modified": "20150409182544663",
            "tags": "$:/tags/EditControls",
            "title": "$:/plugins/danielo515/searchNreplace/ui/controls/replace",
            "type": "text/vnd.tiddlywiki",
            "text": "<$edit-text tiddler=\"$:/state/searchNreplace/search\" tag=\"input\" default=\"\" placeholder=\"search\"/> <$edit-text tiddler=\"$:/state/searchNreplace/replace\" tag=\"input\" default=\"\" placeholder=\"replace\"/> <$button class=\"button button-tiny button-primary\">Replace\r\n<$action-sendmessage $message=\"tm-replace\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} replace={{$:/state/searchNreplace/replace}} global={{$:/state/searchNreplace/global}}\r\nregex={{$:/state/searchNreplace/regex}}/>\r\n</$button>\r\n<$checkbox default=\"yes\" unchecked=\"no\" checked=\"yes\" field=\"text\" tiddler=\"$:/state/searchNreplace/global\">Global</$checkbox>\r\n<$checkbox default=\"no\" unchecked=\"no\" checked=\"yes\" field=\"text\" tiddler=\"$:/state/searchNreplace/regex\">Use regex</$checkbox>"
        },
        "$:/plugins/danielo515/searchNreplace/styles": {
            "created": "20150409181359332",
            "modified": "20150409182956438",
            "tags": "$:/tags/Stylesheet",
            "title": "$:/plugins/danielo515/searchNreplace/styles",
            "type": "text/css",
            "text": "  .tc-edit-controls {\n  border: 1px solid #cccccc;\n  border-top: 0px;\n  padding: 4px 8px 4px 8px;\n}"
        }
    }
}



$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize

15px



$:/themes/tiddlywiki/vanilla/metrics/bodylineheight

24px



$:/themes/tiddlywiki/vanilla/metrics/fontsize

14px



$:/themes/tiddlywiki/vanilla/metrics/lineheight

20px



$:/themes/tiddlywiki/vanilla/options/sidebarlayout

fluid-fixed



btn Delete Cards

<$button>
<$list filter="[tag[ARTICLE]] [tag[IMG]]"><$action-deletetiddler $tiddler=<<currentTiddler>> /></$list>
Del ARTICLE and IMG cards
</$button>



Configuration Settings File

<<glbl_image_wide "img Developer Settings Config">>

<<glbl_article_list>>



Developer Settings App

{{ext TW Return}}

<<list-links filter:"[tag[DOC]field:level[1]sort[title]] [tag[DOC]field:level[]sort[title]]">>

[[___|Recent Entries]]



Developer Settings File

<<glbl_image_wide "img Saved Settings File">>

<<glbl_article_list>>



DivPop btn

\define divpop_current(ur_ref)
<$button class=<<tv-config-toolbar-class>> >
<$action-setfield $tiddler="$:/state/sidebar" text="yes"/>
<$action-setfield $tiddler="$:/state/popup/DivPopTitle" text="$ur_ref$"/>
<$action-sendmessage $message="tm-close-tiddler" $param="pop_right"/>
<$list filter="[<tv-config-toolbar-icons>match[yes]]">
{{DivPop.svg}}
</$list>
<$list filter="[<tv-config-toolbar-text>match[yes]]">
<span class="tc-btn-text"><$text text="Popup over Sidebar"/></span>
</$list>
</$button>
\end

<$list filter="[all[current]]">
<$macrocall $name=divpop_current ur_ref=<<currentTiddler>> /> 
</$list>



DivPop glbl

<$list filter="[{$:/state/popup/DivPopTitle}is[tiddler]]">
<div style="
position: fixed;
top: 0px;
right: 0px;
width: 350px;
border: 3px solid;
background: white;
bottom: 0%;
">
<div style="overflow-y: scroll; height: 100%;">
<$button>
<$action-setfield $tiddler="$:/state/sidebar" text="no"/>
<$action-setfield $tiddler="$:/state/popup/DivPopTitle" text=""/>
close
</$button>
<$tiddler tiddler=<<currentTiddler>> >
<$transclude mode="block" />
</$tiddler>
</div>
</div>
</$list>




DivPop.svg

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   sodipodi:docname="PopupSidebar.svg"
   id="svg52"
   version="1.1"
   height="22pt"
   width="22pt"
   viewBox="0 0 128 128"
   class="tc-image-close-button tc-image-button">
  <metadata
     id="metadata58">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <defs
     id="defs56">
    <inkscape:perspective
       id="perspective60"
       inkscape:persp3d-origin="64 : 36.371105 : 1"
       inkscape:vp_z="128 : 43.054765 : 1"
       inkscape:vp_y="0 : 313.29655 : 0"
       inkscape:vp_x="0 : 43.054765 : 1"
       sodipodi:type="inkscape:persp3d" />
  </defs>
  <sodipodi:namedview
     inkscape:current-layer="svg52"
     inkscape:window-maximized="0"
     inkscape:window-y="27"
     inkscape:window-x="61"
     inkscape:cy="12.415296"
     inkscape:cx="21.019608"
     inkscape:zoom="8"
     showgrid="false"
     id="namedview54"
     inkscape:window-height="480"
     inkscape:window-width="820"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0"
     guidetolerance="10"
     gridtolerance="10"
     objecttolerance="10"
     borderopacity="1"
     bordercolor="#666666"
     pagecolor="#ffffff" />
  <g
     id="g50"
     fill-rule="evenodd" />
  <rect
     y="13.090909"
     x="10.909091"
     height="104.72727"
     width="111.27273"
     id="rect85"
     style="fill:#cccccc;stroke-width:4.36364" />
  <rect
     y="19.636366"
     x="19.09091"
     height="89.454567"
     width="95.454552"
     id="rect92"
     style="fill:#ffffff;stroke-width:4.36364" />
  <rect
     y="58.909092"
     x="50.727272"
     height="10.909091"
     width="42.545452"
     id="rect94"
     style="fill:#cccccc;stroke-width:4.36364" />
  <path
     id="path96"
     d="m 61.090909,34.363636 c 32.181818,24.545458 32.181818,24.545458 32.181818,24.545458 v 0"
     style="fill:#cccccc;stroke:#cccccc;stroke-width:4.36364px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
  <path
     id="path98"
     d="M 64.909091,95.999999 C 93.272727,69.818185 93.272727,69.818185 93.272727,69.818185"
     style="fill:#b3b3b3;stroke:#cccccc;stroke-width:4.36364px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
  <rect
     y="16.90909"
     x="86.727272"
     height="94.909088"
     width="8.181818"
     id="rect100"
     style="fill:#cccccc;stroke-width:4.36364" />
</svg>




ext TW Return

\define TW_Return(ur_url, ur_link_title)
<div style="float:right"><a href="$ur_url$"> ($ur_link_title$)</a></div>
\end
<$list filter="[<tv-config-toolbar-icons>match[no]]">
<$list filter="[{$:/info/url/full}split[/]count[]subtract[1]]" variable=found_index>
<$list filter="[{$:/info/url/full}split[/]butfirst<found_index>first[]split[.html]join[.htm]]">
<$macrocall $name=TW_Return ur_url=<<currentTiddler>> ur_link_title="TiddlyWiki view of website" />
</$list>
</$list>
</$list>
<$list filter="[<tv-config-toolbar-icons>!match[no]]">
<$list filter="[{$:/info/url/full}split[/]count[]subtract[1]]" variable=found_index>
<$list filter="[{$:/info/url/full}split[/]butfirst<found_index>first[]split[.html]join[.htm]split[.htm]join[.html]]">
<$macrocall $name=TW_Return ur_url=<<currentTiddler>> ur_link_title="Static HTML view of website" />
</$list>
</$list>
</$list>




Font Size

<$button>
{{keyboard action FontLarge}}
Big Font
</$button>

<$button>
{{keyboard action FontNormal}}
Normal Font
</$button>

<$button>
<$action-setfield $tiddler="$:/state/sidebar" text="no"/>
<$action-setfield $tiddler="$:/state/popup/DivPopTitle" text=""/>
<$action-setfield $tiddler="$:/state/tab/sidebar--595412856" text="$:/core/ui/SideBar/More"/>
<$action-sendmessage $message="tm-save-wiki" />
Save Wiki to GitHub
</$button>

<$list filter="[<currentTiddler>!prefix[Draft of]]" variable=strCARD_PK>
<$button>
<$list filter="[list[$:/StoryList]] -[<strCARD_PK>]" variable=strCLOSE_PK>
<$action-sendmessage $message="tm-close-tiddler" $param=<<strCLOSE_PK>>/>
</$list>
Close all other open Cards
</$button>
</$list>



<$vars new_card_entry_pk="$:/state/popup/NewTempCardPK">
<$edit-text tiddler=<<new_card_entry_pk>> field=text default="New Card Title" placeholder="[no text yet]" autoHeight=yes tag=input/><br>
<$link to=<<new_card_entry_pk>> /> = -<$transclude tiddler=<<new_card_entry_pk>> />-<br>

<$list variable=new_card filter="[<new_card_entry_pk>get[text]!match[]]">
<$vars compare_entry_pk="$:/state/popup/CompareTempCardPK">

<$list variable=new_pk filter="[<new_card>addprefix[$:/state/popup/]]">
<$button>
<$action-sendmessage $message="tm-new-tiddler" title=<<new_pk>> tags="OneTag [[Another Tag]]" text=<<now "Today is DDth, MMM YYYY">>/>
Create Card ''<<new_card>>'' and Edit
</$button><br>

<$button>
<$wikify name=open_brackets text="&#91;&#91;">
<$wikify name=close_brackets text="&#93;&#93;">
<$list variable=orig_card_exists filter="[<new_card>is[tiddler]count[]match[1]split[1]join[empty card]else[card not created]]">
<$list variable=orig_card_content filter="[<new_card>get[text]else<orig_card_exists>addprefix[```
]addprefix[

]addprefix<close_brackets>addprefix<new_card>addprefix<open_brackets>]">
<$action-setfield $tiddler=<<new_pk>> text=<<orig_card_content>> />
</$list><!--orig_card_content-->
</$list><!--orig_card_exists-->
</$wikify><!--close_brackets-->
</$wikify><!--open_brackets-->
<$action-navigate $to=<<new_pk>>/>
Create Card ''<<new_card>>'' and Show
</$button><br>

<$link to=<<new_pk>> /><br>

<$button>
<$action-sendmessage $message="tm-close-tiddler" $param=<<new_pk>> />
Close Card: ''<<new_card>>''
</$button><br>

<$list filter="[<currentTiddler>!prefix[Draft of]]" variable=strCARD_PK>
<$button>
<$list filter="[list[$:/StoryList]] -[<strCARD_PK>]" variable=strCLOSE_PK>
<$action-sendmessage $message="tm-close-tiddler" $param=<<strCLOSE_PK>>/>
</$list>
Close all other open Cards
</$button>
</$list><br>

<$button>
<$action-sendmessage $message="tm-delete-tiddler" $param=<<new_pk>> />
Delete Card: ''<<new_card>>'' with confirmation
</$button><br>

<$button>
<$action-sendmessage $message="tm-close-tiddler" $param=<<new_pk>> />
<$action-deletetiddler $tiddler=<<new_pk>> />
Delete Card: ''<<new_card>>'' without confirmation
</$button><br>

<$edit-text tiddler=<<compare_entry_pk>> field=text default="Compare Card Title" placeholder="[no text yet]" autoHeight=yes tag=input/><br>
<$list variable=compare_pk filter="[<compare_entry_pk>get[text]]">
<$link to=<<compare_pk>> />
<$list variable=compare_text filter="[<compare_pk>get[text]]">
<$list variable=new_card_text filter="[<new_pk>get[text]]">
<$diff-text source=<<new_card_text>> dest=<<compare_text>> />
</$list><!--new_card_text-->
</$list><!--compare_text-->
</$list><!--compare_pk-->

</$list><!--new_pk-->
</$vars><!--compare_entry_pk-->
</$list><!--new_card-->
</$vars><!--new_card_entry_pk-->


!!Cards tagged with only $ prefixed tags

<$list variable=cur_card filter="[is[tiddler]has[tags]!prefix[$:/state/]]">
<$list variable=has_non_dprefixed_tag filter="[<cur_card>tags[]!prefix[$]count[]match[0]]">

<$link to=<<cur_card>> />
</$list><!--has_non_dprefixed_tag-->
</$list><!--cur_card-->


!!Cards where has[tags] does not work

<$list variable=cur_card filter="[is[tiddler]]">
<$list variable=has_tags_test filter="[<cur_card>!has[tags]count[]] [<cur_card>has[tags]count[]] +[sum[]match[0]]">

<$link to=<<cur_card>> />
</$list><!--has_tags_test-->
</$list><!--cur_card-->

!!Cards with no tags

<$list variable=cur_card filter="[is[tiddler]!has[tags]!prefix[Draft of]!prefix[$:/state/]!prefix[$:/library/]!prefix[$:/boot/]!prefix[$:/temp/]!match[$:/core]!match[$:/Import]!match[$:/isEncrypted]!match[$:/SiteSubtitle]!match[$:/SiteTitle]!prefix[$:/status/]!match[$:/StoryList]!match[$:/HistoryList]!match[$:/theme]!match[$:/themes/tiddlywiki/snowwhite]!match[$:/themes/tiddlywiki/vanilla]]">
<$list variable=has_parent_card filter="[<cur_card>split[\]count[]match[1]]">

<$link to=<<cur_card>> />
</$list><!--has_parent_card-->

<$list variable=has_parent_card filter="[<cur_card>split[\]count[]!match[1]]">
<$list variable=parent_card_exists filter="[<cur_card>split[\]first[]!is[tiddler]]">

<$link to=<<cur_card>> />
</$list><!--parent_card_exists-->
</$list><!--has_parent_card-->
</$list><!--cur_card-->



<$button>
<$list variable=cur_card filter="[is[tiddler]!prefix[$:/state/]!prefix[Draft of]has[tags]]">
<$action-listops $tiddler=<<cur_card>> $tags="+[append[COPY]]"/>
</$list>
<$list variable=cur_card filter="[is[tiddler]!prefix[$:/state/]!prefix[Draft of]!has[tags]]">
<$list variable=has_parent_card filter="[<cur_card>split[\]count[]!match[1]]">
<$list variable=parent_card_exists filter="[<cur_card>split[\]first[]is[tiddler]]">
<$action-listops $tiddler=<<cur_card>> $tags="+[append[COPY]]"/>
</$list><!--parent_card_exists-->
</$list><!--has_parent_card-->
</$list><!--cur_card-->
Append COPY tag to all cards that already have tags
</$button><br>

<$button>
<$list variable=cur_card filter="[tag[COPY]]">
<$action-listops $tiddler=<<cur_card>> $tags="+[remove[COPY]]"/>
</$list>
Remove COPY tag from all cards
</$button><br>


[[btn Delete Cards]]




img Developer Settings Config

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



img Saved Settings File





keyboard action FontLarge

<$action-setfield $tiddler="$:/themes/tiddlywiki/vanilla/metrics/fontsize" text="24px"/>
<$action-setfield $tiddler="$:/themes/tiddlywiki/vanilla/metrics/lineheight" text="30px"/>
<$action-setfield $tiddler="$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize" text="25px"/>
<$action-setfield $tiddler="$:/themes/tiddlywiki/vanilla/metrics/bodylineheight" text="34px"/>




keyboard action FontNormal

<$action-setfield $tiddler="$:/themes/tiddlywiki/vanilla/metrics/fontsize" text="14px"/>
<$action-setfield $tiddler="$:/themes/tiddlywiki/vanilla/metrics/lineheight" text="20px"/>
<$action-setfield $tiddler="$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize" text="15px"/>
<$action-setfield $tiddler="$:/themes/tiddlywiki/vanilla/metrics/bodylineheight" text="24px"/>




keyboard action HomeTiddlers

<$action-sendmessage $message="tm-home"/>




keyboard action SaveAllChanges

\define ExportSaveAll(ur_filename, ur_stamp, ur_save_wiki_extension, ur_save_export_html)
<$action-setfield $tiddler="$:/state/sidebar" text="no"/>
<$action-setfield $tiddler="$:/state/popup/DivPopTitle" text=""/>
<$action-setfield $tiddler="$:/state/tab/sidebar--595412856" text="$:/core/ui/SideBar/More"/>
<$action-sendmessage $message="tm-save-wiki" filename="WikiMove_$ur_filename$-stamp-$ur_stamp$$ur_save_wiki_extension$"
/>
<$list vairable=save_export_html filter="[[$ur_save_export_html$]match[1]]">
<$action-sendmessage $message="tm-download-file"
$param="$:/core/templates/exporters/StaticRiver" filename="WikiMove_$ur_filename$-stamp-$ur_stamp$.html"
exportFilter="""[all[tiddlers]tag[INDEX]sort[title]][all[tiddlers]!tag[EXT]!tag[INDEX]!tag[META]!tag[MCR]!prefix[Draft of]!is[image]!is[tag]!is[system]sort[title]]"""/>
</$list><!--save_export_html-->
<$action-sendmessage $message="tm-download-file"
$param="template ExportAllCode" filename="WikiMove_$ur_filename$-stamp-$ur_stamp$.card.txt" />
\end
<$list variable=save_export_html filter="[{$:/info/url/full}suffix[.htm]count[]] [[parm SkipSaveExportHTML]is[tiddler]count[]multiply[-1]] +[sum[]]">
<$list variable=save_wiki_extension filter="[{$:/info/url/full}split[.]last[]addprefix[.]]">
<$list variable=save_as_file_name filter="[{$:/info/url/full}split[file:///]join[]split[:]join[-colon-]split[.html]join[]split[.htm]join[]split[%20]join[ ]split[/]join[-fslash-]split[%]join[-percent-]]">
<$macrocall $name="ExportSaveAll" ur_filename=<<save_as_file_name>> ur_stamp=<<now format:"YYYYm0MMd0DDam0hhm0mms0ss">> ur_save_wiki_extension=<<save_wiki_extension>> ur_save_export_html=<<save_export_html>> />
</$list><!--save_as_file_name-->
</$list><!--save_export_html-->




Main Form User Action

<<glbl_image_wide "img Main Form">>

<<glbl_article_list>>



mcr glbl_article_list

\define glbl_article_list()
<ol>
<$list filter="[<currentTiddler>addsuffix[\]]">
<$list filter="[all[tiddlers]prefix<currentTiddler>sort[]]">
<li><$link to=<<currentTiddler>> /></li>
</$list>
</$list>
</ol>
\end



mcr glbl_code_split

\define glbl_code_block(ur_note_pk)
[[$ur_note_pk$]]
<$codeblock code={{$ur_note_pk$}} />
\end
\define glbl_code_linenum(ur_note_pk, ur_skip_count, ur_section_size, ur_disp_linenum)
<div style="clear:both">[[$ur_note_pk$]]</div>
<$list filter="[[$ur_skip_count$]!match[]else[0]]" variable=intSKIP_COUNT>
<$list filter="[[$ur_note_pk$]get[text]splitregexp[\n]butfirst<intSKIP_COUNT>count[]]" variable=intLINE_COUNT>
<$list filter="[[$ur_section_size$]!match[]!match[0]else<intLINE_COUNT>]" variable=intSECTION_SIZE>
<$list filter="[range<intSECTION_SIZE>]" variable=intCUR_LINE>
<$list filter="[<intCUR_LINE>subtract[1]]" variable=IntREMOVE_LINE>
<$list filter="[[$ur_note_pk$]get[text]splitregexp[\n]butfirst<intSKIP_COUNT>butfirst<IntREMOVE_LINE>first[]]" variable=strCUR_LINE>
<$list filter="[[$ur_disp_linenum$]!match[n]!match[0]]"><div style="float:left"><<intCUR_LINE>></div></$list>
<$codeblock code=<<strCUR_LINE>> />
</$list></$list></$list></$list></$list></$list>
\end
\define glbl_code_split_group(ur_note_pk, ur_skip_count)
<$list filter="[{$ur_note_pk$}splitregexp[\n]butfirst[$ur_skip_count$]first[100]]"><$list filter="[<currentTiddler>splitregexp[\u0026]join[&#x0026;]splitregexp[\u0027]join[&#x0027;]splitregexp[\u002C]join[&#x002C;]splitregexp[\u002D]join[&#x002D;]splitregexp[\u002F]join[&#x002F;]splitregexp[\u003A]join[&#x003A;]splitregexp[\u003C]join[&#x003C;]splitregexp[\u0040]join[&#x0040;]splitregexp[\u005B]join[&#x005B;]splitregexp[\u005C]join[&#x005C;]splitregexp[\u005E]join[&#x005E;]splitregexp[\u005F]join[&#x005F;]splitregexp[\u0060]join[&#x0060;]splitregexp[\u007B]join[&#x007B;]splitregexp[\u007E]join[&#x007E;]splitregexp[\u0009]join[__	__]splitregexp[\u0020]join[__ __]splitregexp[\u0022\u0022\u0022]join[&#x0022;&#x0022;&#x0022;]]"><<currentTiddler>>
</$list></$list>
\end
\define glbl_code_split_count(ur_note_pk, ur_rem_counter, ur_last_counter, ur_first_line_skip)
<$list filter="[{$ur_last_counter$}subtract{$ur_rem_counter$}multiply[100]add[$ur_first_line_skip$]]"><$macrocall $name=glbl_code_split_group ur_note_pk="$ur_note_pk$" ur_skip_count=<<currentTiddler>> /></$list>
\end
\define glbl_code_split_data()
<$macrocall $name=glbl_code_split_count ur_note_pk=<<source_note_pk>> ur_rem_counter=<<temp_remcounter_pk>> ur_last_counter=<<temp_lastcounter_pk>> ur_first_line_skip=<<first_line_skip>> />
\end
\define glbl_code_split_next_group_disp(ur_rem_counter)
<$list filter="[{$ur_rem_counter$}subtract[1]]">
<$action-setfield $tiddler=<<temp_remcounter_pk>> text=<<currentTiddler>> />
</$list>
\end
\define glbl_code_split_disp(ur_source_note_pk, ur_temp_note_pk, ur_temp_remcounter_pk, ur_first_line_skip)
Line Count: <$list filter="[{$ur_source_note_pk$}splitregexp[\n]butfirst[$ur_first_line_skip$]count[]]"></$list><br>
Rem to find: <$list filter="[{$ur_temp_remcounter_pk$}]"></$list><br>
Source data: [[$ur_source_note_pk$]]<br>
\end
\define glbl_code_split_combine()
$(currentTiddler)$$(str_html_out)$
\end
\define glbl_code_split_init(ur_note_pk, ur_first_line_skip)
<$list filter="[[$ur_first_line_skip$]!match[]then[$ur_first_line_skip$]else[0]]">
  <$vars source_note_pk="$ur_note_pk$" temp_note_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesOutput" temp_remcounter_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesRemCounter" temp_lastcounter_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesLastCounter" first_line_skip=<<currentTiddler>> >
    <$list filter="[{$ur_note_pk$}splitregexp[\n]butfirst<first_line_skip>count[]divide[100]add[1]floor[]]">
      <$button>
        <$action-setfield $tiddler=<<temp_note_pk>> text="" />
        <$action-setfield $tiddler=<<temp_remcounter_pk>> text=<<currentTiddler>> />
        <$action-setfield $tiddler=<<temp_lastcounter_pk>> text=<<currentTiddler>> />
        Reset destination edit field
        </$button>
      </$list><br>
	
    <$edit-text tiddler=<<temp_remcounter_pk>> autoHeight=yes tag=input />
    </$vars>
  </$list>
\end
\define glbl_code_split(ur_note_pk, ur_first_line_skip)
<$macrocall $name=glbl_code_split_init ur_note_pk="$ur_note_pk$" ur_first_line_skip="$ur_first_line_skip$" /><br>
<$list filter="[[$ur_first_line_skip$]!match[]then[$ur_first_line_skip$]else[0]]">
  <$vars source_note_pk="$ur_note_pk$" temp_note_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesOutput" temp_remcounter_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesRemCounter" temp_lastcounter_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesLastCounter" first_line_skip=<<currentTiddler>> >
    <$macrocall $name=glbl_code_split_disp ur_source_note_pk=<<source_note_pk>> ur_temp_note_pk=<<temp_note_pk>> ur_temp_remcounter_pk=<<temp_remcounter_pk>> ur_temp_lastcounter_pk=<<temp_lastcounter_pk>> ur_first_line_skip=<<first_line_skip>> />
    <$button>
      <$wikify name=str_html_out text=<<glbl_code_split_data>> >
        <$list filter="[<temp_note_pk>get[text]else[]]"><$vars combine_html_out=<<glbl_code_split_combine>> >
        <$action-setfield $tiddler=<<temp_note_pk>> text=<<combine_html_out>> />
         </$vars></$list>
        <$macrocall $name=glbl_code_split_next_group_disp ur_rem_counter=<<temp_remcounter_pk>> />
        </$wikify>
      
      Find next 100 lines
      </$button><br>

    <$edit-text tiddler=<<temp_note_pk>> autoHeight=no />
    </$vars>
  </$list>
\end
\define glbl_code_disp_group(ur_note_pk, ur_skip_count)
<$list filter="[{$ur_note_pk$}splitregexp[\n]butfirst[$ur_skip_count$]first[100]]"><$list filter="[<currentTiddler>splitregexp[\u0026]join[&#x0026;]splitregexp[\u00A0]join[&nbsp;]splitregexp[\u0009]join[&nbsp;&nbsp;&nbsp;&nbsp;]splitregexp[\u0020]join[&nbsp;]splitregexp[\u0027]join[&#x0027;]splitregexp[\u002C]join[&#x002C;]splitregexp[\u002D]join[&#x002D;]splitregexp[\u002F]join[&#x002F;]splitregexp[\u003A]join[&#x003A;]splitregexp[\u003C]join[&#x003C;]splitregexp[\u0040]join[&#x0040;]splitregexp[\u005B]join[&#x005B;]splitregexp[\u005C]join[&#x005C;]splitregexp[\u005E]join[&#x005E;]splitregexp[\u005F]join[&#x005F;]splitregexp[\u0060]join[&#x0060;]splitregexp[\u007B]join[&#x007B;]splitregexp[\u007E]join[&#x007E;]]"><<currentTiddler>><br></$list></$list>
\end
\define glbl_code_disp_count(ur_note_pk, ur_rem_counter, ur_last_counter, ur_first_line_skip)
<$list filter="[{$ur_last_counter$}subtract{$ur_rem_counter$}multiply[100]add[$ur_first_line_skip$]]"><$macrocall $name=glbl_code_disp_group ur_note_pk="$ur_note_pk$" ur_skip_count=<<currentTiddler>> /></$list>
\end
\define glbl_code_disp_data()
<$macrocall $name=glbl_code_disp_count ur_note_pk=<<source_note_pk>> ur_rem_counter=<<temp_remcounter_pk>> ur_last_counter=<<temp_lastcounter_pk>> ur_first_line_skip=<<first_line_skip>> />
\end
\define glbl_code_disp_next_group_disp(ur_rem_counter, ur_oper)
<$list filter="[{$ur_rem_counter$}$ur_oper$[1]]">
<$action-setfield $tiddler=<<temp_remcounter_pk>> text=<<currentTiddler>> />
</$list>
\end
\define glbl_code_disp_disp(ur_source_note_pk, ur_temp_remcounter_pk, ur_first_line_skip)
Line Count: <$list filter="[{$ur_source_note_pk$}splitregexp[\n]butfirst[$ur_first_line_skip$]count[]]"></$list><br>
Rem to browse: <$list filter="[{$ur_temp_remcounter_pk$}]"></$list><br>
\end
\define glbl_code_disp_init(ur_note_pk, ur_first_line_skip)
<$list filter="[[$ur_first_line_skip$]!match[]then[$ur_first_line_skip$]else[0]]">
  <$vars source_note_pk="$ur_note_pk$" temp_remcounter_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesRemCounter" temp_lastcounter_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesLastCounter" first_line_skip=<<currentTiddler>> >
    <$list filter="[{$ur_note_pk$}splitregexp[\n]butfirst<first_line_skip>count[]divide[100]floor[]]">
      <$button>
        <$action-setfield $tiddler=<<temp_remcounter_pk>> text=<<currentTiddler>> />
        <$action-setfield $tiddler=<<temp_lastcounter_pk>> text=<<currentTiddler>> />
        Reset destination edit field
        </$button>
      </$list><br>
	
    <$edit-text tiddler=<<temp_remcounter_pk>> autoHeight=yes tag=input />
    </$vars>
  </$list>
\end
\define glbl_code_disp(ur_note_pk, ur_first_line_skip)
<$macrocall $name=glbl_code_disp_init ur_note_pk="$ur_note_pk$" ur_first_line_skip="$ur_first_line_skip$" /><br>
[[$ur_note_pk$]]<br>
<$list filter="[[$ur_first_line_skip$]!match[]then[$ur_first_line_skip$]else[0]]">
  <$vars source_note_pk="$ur_note_pk$" temp_remcounter_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesRemCounter" temp_lastcounter_pk="$:/state/popup/$ur_note_pk$/HtmlEscapedLinesLastCounter" first_line_skip=<<currentTiddler>> >
    <$macrocall $name=glbl_code_disp_disp ur_source_note_pk=<<source_note_pk>> ur_temp_remcounter_pk=<<temp_remcounter_pk>> ur_temp_lastcounter_pk=<<temp_lastcounter_pk>> ur_first_line_skip=<<first_line_skip>> />
    <$button>
      <$macrocall $name=glbl_code_disp_next_group_disp ur_rem_counter=<<temp_remcounter_pk>> ur_oper="subtract" />
      
      Browse next 100 lines
      </$button><br>
    <$button>
      <$macrocall $name=glbl_code_disp_next_group_disp ur_rem_counter=<<temp_remcounter_pk>> ur_oper="add" />
      
      Browse prev 100 lines
      </$button><br>

    <<glbl_code_disp_data>>
    </$vars>
  </$list>
\end

<!--<$macrocall $name=glbl_code_disp ur_note_pk="WebNotes\Data" ur_first_line_skip=1 />-->

<!--<<glbl_code_disp "WebNotes\Data 1 >>-->

<!--Does not pass through the \u0009 tab or \u00A0 non-breaking space characters. Chrome highlight and copy puts spaces on the clipboard.-->

<!--[[WebNotes\Data]]-->

<!--<$macrocall $name=glbl_code_split ur_note_pk="WebNotes\Data" ur_first_line_skip=1 />-->

<!--<<glbl_code_block "UrNotePK">>-->

<!--<<glbl_code_linenum "UrNotePK" 0 15 n>>-->



mcr glbl_compare_lines

\define glbl_compare_lines_results_table(ur_note_pk, ur_second_pk, ur_row_count)
<table><tr>
<th>''Line''</th>
<th>Show text</th>
<th>First Side<br>Second Side</th>
</tr>
<$list filter="[range<intSECOND_COUNT>subtract[1]]" variable="intCUR_ENTRY">
<$list filter="[{$ur_note_pk$}splitregexp[\n]butfirst<intCUR_ENTRY>first[]]" variable="strFIRST_LINE">
<$list filter="[{$ur_second_pk$}splitregexp[\n]butfirst<intCUR_ENTRY>first[]!match<strFIRST_LINE>]" variable="strSECOND_LINE">
<tr>
<td rowspan=2>

!!<<intCUR_ENTRY>>
</td>
<td>
<$button>
<$action-setfield $tiddler="$:/state/CompareTextLine1" text=<<intCUR_ENTRY>>/>
<$action-setfield $tiddler="$:/state/CompareTextSection1" text="""<$edit-text tiddler="$:/state/CompareTextLine1" field=text default="" placeholder="[no text yet]" autoHeight=no tag=input/>
<$list filter="[{$:/state/CompareTextLine1}!match[]else[0]]" variable=intSTART_LINE><$list filter="[<intSTART_LINE>subtract[1]]" variable=intPREV_LINE>
<$list filter="[<intSTART_LINE>add[1]]" variable=intNEXT_LINE>
<$button>
<$action-setfield $tiddler="$:/state/CompareTextLine1" text=<<intPREV_LINE>>/>
<<intPREV_LINE>>
</$button>
<$button>
<$action-setfield $tiddler="$:/state/CompareTextLine1" text=<<intNEXT_LINE>>/>
<<intNEXT_LINE>>
</$button><br>[[$ur_note_pk$]]<br>
<$macrocall $name=glbl_code_disp_group ur_note_pk="$ur_note_pk$"  ur_skip_count=<<intSTART_LINE>> />
</$list></$list></$list>""" />
<$action-navigate $to="$:/state/CompareTextSection1"/>
<<intCUR_ENTRY>>
</$button>
</td>
<td><$codeblock code=<<strFIRST_LINE>> /></td>
</tr>
<tr>
<td>
<$button>
<$action-setfield $tiddler="$:/state/CompareTextLine2" text=<<intCUR_ENTRY>>/>
<$action-setfield $tiddler="$:/state/CompareTextSection2" text="""<$edit-text tiddler="$:/state/CompareTextLine2" field=text default="" placeholder="[no text yet]" autoHeight=no tag=input/>
<$list filter="[{$:/state/CompareTextLine2}!match[]else[0]]" variable=intSTART_LINE>
<$list filter="[<intSTART_LINE>subtract[1]]" variable=intPREV_LINE>
<$list filter="[<intSTART_LINE>add[1]]" variable=intNEXT_LINE>
<$button>
<$action-setfield $tiddler="$:/state/CompareTextLine2" text=<<intPREV_LINE>>/>
<<intPREV_LINE>>
</$button>
<$button>
<$action-setfield $tiddler="$:/state/CompareTextLine2" text=<<intNEXT_LINE>>/>
<<intNEXT_LINE>>
</$button><br>[[$ur_second_pk$]]<br>
<$macrocall $name=glbl_code_disp_group ur_note_pk="$ur_second_pk$"  ur_skip_count=<<intSTART_LINE>> />
</$list></$list></$list>""" />
<$action-navigate $to="$:/state/CompareTextSection2"/>
<<intCUR_ENTRY>>
</$button>
</td>
<td><$codeblock code=<<strSECOND_LINE>> /></td>
</tr>
</$list></$list></$list>
</table>
\end
\define glbl_compare_lines(ur_note_pk, ur_second_pk)
<$list filter="[{$ur_note_pk$}splitregexp[\n]count[]]" variable="intFIRST_COUNT">
<$list filter="[{$ur_second_pk$}splitregexp[\n]count[]]" variable="intSECOND_COUNT">
<$list filter="[{$ur_second_pk$}splitregexp[\n]count[]subtract<intFIRST_COUNT>]" variable="intSECOND_EXTRA">

[[$ur_note_pk$]] line count: <<intFIRST_COUNT>>

[[$ur_second_pk$]] line count: <<intSECOND_COUNT>>

''$ur_second_pk$'' excess line count: ''<<intSECOND_EXTRA>>''

<$macrocall $name=glbl_compare_lines_results_table ur_note_pk="$ur_note_pk$" ur_second_pk="$ur_second_pk$" ur_row_count=<<intSECOND_COUNT>> />
</$list>
</$list>
</$list>
\end

<!--
<$edit-text tiddler="$:/state/CompareText1" field=text default="" placeholder="[no text yet]" autoHeight=no tag=textarea/>
<$edit-text tiddler="$:/state/CompareText2" field=text default="" placeholder="[no text yet]" autoHeight=no tag=textarea/>

<<glbl_compare_lines "$:/state/CompareText1" "$:/state/CompareText2">>
-->



mcr glbl_ext

\define ext(ur_extnote_pk)
<$list filter="[[ext $ur_extnote_pk$]get[text]count[]match[0]]">Missing: [$ur_extnote_pk$]</$list>
{{ext $ur_extnote_pk$}}<div style="float:right">[[->|ext $ur_extnote_pk$]]</div>
\end




mcr glbl_image

\define glbl_image_high(ur_image_pk, ur_size:200)
<$link to="$ur_image_pk$">[img height=$ur_size$px [$ur_image_pk$]]</$link>
\end
\define glbl_image_wide(ur_image_pk, ur_size:500)
<$link to="$ur_image_pk$">[img width=$ur_size$px [$ur_image_pk$]]</$link>
\end



Recent Entries

[[Search All Fields]]

[[View All Cards]]

[[View All Code]]

[[Font Size]]

<<timeline limit:30 format:"YYYY-0MM-0DD">>



Search All Fields

<$vars search_text_pk="$:/state/popup/SearchAllFields">
<$list variable=show_code_pk filter="[<search_text_pk>addsuffix[-checkShowCode]]">
<$list variable=skip_system_pk filter="[<search_text_pk>addsuffix[-checkSkipSystem]]">
<$edit-text tiddler=<<search_text_pk>> field=text default="" placeholder="[no text yet]" autoHeight=yes tag=input/>
<$checkbox default="no" unchecked="no" checked="yes" field="text" tiddler=<<show_code_pk>>> Show Code</$checkbox>
<$checkbox default="yes" unchecked="no" checked="yes" field="text" tiddler=<<skip_system_pk>>> Skip System </$checkbox><br>
<br>

<$list variable=cur_search_text filter="[<search_text_pk>get[text]addsuffix[(?i)]!match[]]">
<$list variable=cur_showcode_text filter="[<show_code_pk>get[text]else[no]]">
<$list variable=cur_skipsystem_text filter="[<skip_system_pk>get[text]else[yes]match[yes]count[]]">

<!--Card titles-->
<$list variable=cur_pk filter="[regexp<cur_search_text>sort[]]">
<$list variable=found_skipsystem filter="[<cur_skipsystem_text>] [<cur_pk>!is[system]count[]] +[sum[]match[1]]">

<$link to=<<cur_pk>> />: title
</$list><!--found_skipsystem-->
</$list><!--cur_pk-->

<!--Card fields-->
<$list variable=cur_pk filter="[!regexp<cur_search_text>sort[]]">
<$list variable=found_skipsystem filter="[<cur_pk>is[system]count[]multiply<cur_skipsystem_text>match[0]]">
<$list variable=cur_field filter="[<cur_pk>fields[]]">
<$list variable=found_field filter="[<cur_pk>get<cur_field>regexp<cur_search_text>]">

<$link to=<<cur_pk>> />: <<cur_field>>
<$list variable=disp_code filter="[<cur_showcode_text>match[yes]]">
<$codeblock code=<<found_field>> />
</$list><!--disp_code-->
</$list><!--found_field-->
</$list><!--cur_field-->

</$list><!--found_skipsystem-->
</$list><!--cur_pk-->

</$list><!--cur_skipsystem_text-->
</$list><!--cur_showcode_text-->
</$list><!--cur_search_text-->
</$list><!--skip_system_pk-->
</$list><!--show_code_pk-->
</$vars><!--search_text_pk-->



template ExportAllCode

\define renderContent()
<$list variable=cur_tip_pk filter="[all[tiddlers]!has[draft.of]has[tags]!prefix[undefined]sort[title]]">
<hr>
<h2><$link to=<<cur_tip_pk>> /></h2>
<$list variable=cur_tip_text filter="[<cur_tip_pk>get[text]]">
<$codeblock code=<<cur_tip_text>> />
</$list><!--cur_tip_text-->
</$list><!--cur_tip_pk-->
\end
<<renderContent>>



template Home Button

<div style="float:right;padding-left:30px;">
{{$:/core/ui/TopBar/menu}}
</div>

<div style="float:right"><$button set="$:/state/sidebar" setTo="no" tooltip={{$:/language/Buttons/Home/Hint}} aria-label={{$:/language/Buttons/Home/Caption}} class=<<tv-config-toolbar-class>>>
<span class="tc-dirty-indicator">
<$list filter="[<tv-config-toolbar-icons>match[yes]]">
{{$:/core/images/home-button}}
</$list>
<$list filter="[<tv-config-toolbar-text>match[yes]]">
<span class="tc-btn-text"><$text text={{$:/language/Buttons/Home/Caption}}/></span>
</$list>
</span>
<$action-sendmessage $message="tm-home"/>
</$button></div>




View All Cards

<$list filter="[all[tiddlers]!tag[EXTLINK]!tag[IMG]!tag[INDEX]!tag[MCR]!tag[META]!has[draft.of]!is[image]!is[tag]!is[system]has[tags]!prefix[undefined]sort[title]]">
<hr>
<h2><$link to=<<currentTiddler>> /></h2>
{{||$:/core/ui/ViewTemplate/tags}}
<$transclude mode="block"/>
</$list>



View All Code

<$list variable=cur_card_pk filter="[all[tiddlers]!has[draft.of]has[tags]!prefix[undefined]sort[title]]">
<hr>
<h2><$link to=<<cur_card_pk>> /></h2>
<$list variable=cur_card_text filter="[<cur_card_pk>get[text]]">
<$codeblock code=<<cur_card_text>> />
</$list><!--cur_card_text-->
</$list><!--cur_card_pk-->

