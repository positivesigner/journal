start "" "C:\TJBF\zPortableInstalls\VBNetScript\VBNetScript.exe" %0
exit
C:\TJBF\zPortableInstalls\VBNetScript\DLL_WinForm2019m09d13\System.Drawing.dll
C:\TJBF\zPortableInstalls\VBNetScript\DLL_WinForm2019m09d13\System.Windows.Forms.dll
C:\TJBF\zPortableInstalls\VBNetScript\MxClasses\MxBaseE7.vb
            Dim objFORM = New Mx.UIForm()
            'System.Windows.Forms.Application.Run(objFORM) only works from a command line program with no forms open. VBNetScript already has a form open.
			If objFORM.lstFOLDER.Count > 0 Then
				Call objFORM.ShowDialog()
			End If
        'Me.txtRetVal.Text = retOUTPUT.gText
		'RetVal = retOUTPUT.gText
		RetVal = "Quit"
	End Function
End Class
End Namespace

Namespace Mx
    Public Class UIForm
        Inherits System.Windows.Forms.Form

        Public tmrFIVE_SEC As System.Windows.Forms.Timer
        Public lstFOLDER As Mx.Sdata
        Public txtOUTPUT As System.Windows.Forms.TextBox

        Const strvLIT_USER_PROFILE_DOWNLOADS = "%USERPROFILE%\downloads"

        Public Sub New()
            Dim objPATH_IO = New Mx.glbl.gPathIo
            Me.lstFOLDER = New Mx.Sdata

            Me.Name = "Tiddler_Move"
            Me.Text = "Tiddler Move 5-Sec"
            Me.Size = New System.Drawing.Size(400, 400)
            Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen

            Me.txtOUTPUT = New System.Windows.Forms.TextBox()
            Me.txtOUTPUT.Name = "txtOUTPUT"
            Me.txtOUTPUT.Multiline = True
            Me.txtOUTPUT.ScrollBars = System.Windows.Forms.ScrollBars.Vertical
            Me.txtOUTPUT.Dock = System.Windows.Forms.DockStyle.Fill
            Me.Controls.Add(Me.txtOUTPUT)

            Dim strFIRST_FOLDER = objPATH_IO.GetDirectoryName(Mx.Class1.SourcePath)
            Me.lstFOLDER.d(strFIRST_FOLDER)
            Me.txtOUTPUT.Text = Strapd().dLine("Listening:").dS(strFIRST_FOLDER)

            Me.tmrFIVE_SEC = New System.Windows.Forms.Timer()
            Me.tmrFIVE_SEC.Interval = 50
            AddHandler Me.tmrFIVE_SEC.Tick, AddressOf Timer1_Tick

            Dim retOUTPUT = New Mx.sub_main.CombineTextOutput(Mx.Strapd(), New Mx.glbl.gFileIo, Me.lstFOLDER)
            retOUTPUT = Initialize_Form(retOUTPUT)
            If retOUTPUT.gFolderList.Count = 0 Then
                Me.Close()

            Else
                Me.tmrFIVE_SEC.Start()
            End If 'retOUTPUT
        End Sub 'New

        Function Initialize_Form(ret_output As Mx.sub_main.CombineTextOutput) As Mx.sub_main.CombineTextOutput
            Initialize_Form = ret_output
            ret_output = Mx.sub_main.FormInit(ret_output, strvLIT_USER_PROFILE_DOWNLOADS, New Mx.glbl.gDiagnostics, New Mx.glbl.gDirIo, New Mx.glbl.gEnvironment, New Mx.glbl.gFileIo, New Mx.glbl.gPathIo, New Mx.glbl.gThread)
        End Function 'Initialize_Form

        Sub Look_For_Files()
            Dim retOUTPUT = New Mx.sub_main.CombineTextOutput(Mx.Strapd(), New Mx.glbl.gFileIo, Me.lstFOLDER)
            'retOUTPUT = Mx.sub_main.Proc_Exec(retOUTPUT, My.Application.Info.DirectoryPath.Replace("\bin\Debug", ""), New Mx.glbl.gDirIo, New Mx.glbl.gPathIo, New Mx.glbl.gThread)
            retOUTPUT = Mx.sub_main.Proc_Exec(retOUTPUT, strvLIT_USER_PROFILE_DOWNLOADS, New Mx.glbl.gDirIo, New Mx.glbl.gEnvironment, New Mx.glbl.gFileIo, New Mx.glbl.gPathIo, New Mx.glbl.gThread)
            If retOUTPUT.gText.HasText Then
                Me.txtOUTPUT.Text = retOUTPUT.gText.ToString & vbCrLf & Me.txtOUTPUT.Text
            End If
        End Sub 'Look_For_Files

        Sub Timer1_Tick(sender As Object, e As System.EventArgs)
            Me.tmrFIVE_SEC.Stop()
            Me.tmrFIVE_SEC.Interval = 5000
            Call Look_For_Files()
            Me.tmrFIVE_SEC.Start()
        End Sub
    End Class 'UIForm


    Public Class sub_main
        Const strLIT_TIDDLER_MOVE_5_SEC = "Tiddler Move 5-Sec"

        Public Shared Function FormInit(ret_output As CombineTextOutput, ur_update_folder As String, ur_diagnostics As glbl.gDiagnostics, ur_dir_io As glbl.gDirIo, ur_environment As glbl.gEnvironment, ur_file_io As glbl.gFileIo, ur_path_io As glbl.gPathIo, ur_thread As glbl.gThread) As CombineTextOutput
            FormInit = ret_output
            Dim objERR_LIST = New ErrListBase : Try
                Dim strNEW_DATA_FOLDER = ur_environment.ExpandEnvironmentVariables(ur_update_folder)
                If ur_diagnostics.IsActiveWindow(strLIT_TIDDLER_MOVE_5_SEC) Then
                    Dim trwPARMS = New sln.ParmsRow()
                    Dim lstFILE = New sln.FileList()
                    For Each strEXISTING_FOLDER In ret_output.gFolderList
                        trwPARMS = sln.RsrcCompile.wParm_Folder_Defaults(trwPARMS, strNEW_DATA_FOLDER, strEXISTING_FOLDER)
                        ret_output.gFileIo = sln.CreateOutputCompile.Create_MoveFolder_Ref_File(ret_output.gFileIo, trwPARMS, ur_path_io)
                    Next

                    Call ret_output.gFolderList.Clear()
                    Call AppActivate(strLIT_TIDDLER_MOVE_5_SEC)
                End If 'ur_diagnostics

            Catch ex As System.Exception
                Call objERR_LIST.dError_Stack(ex)
            End Try

            If objERR_LIST.Found Then
                ret_output.gText.Clear().d(objERR_LIST.ToString)
            End If
        End Function 'FormInit

        Public Shared Function Proc_Exec(ret_output As CombineTextOutput, ur_update_folder As String, ur_dir_io As glbl.gDirIo, ur_environment As glbl.gEnvironment, ur_file_io As glbl.gFileIo, ur_path_io As glbl.gPathIo, ur_thread As glbl.gThread) As CombineTextOutput
            Proc_Exec = ret_output
            Dim objERR_LIST = New ErrListBase : Try
                Dim strNEW_DATA_FOLDER = ur_environment.ExpandEnvironmentVariables(ur_update_folder)
                Dim trwPARMS = New sln.ParmsRow()
                Dim lstFILE = New sln.FileList()
                trwPARMS = sln.RsrcCompile.wParm_Folder_Defaults(trwPARMS, strNEW_DATA_FOLDER, mt)
                ret_output = sln.RsrcCompile.wFolderEntry_Parameter(ret_output, trwPARMS, ur_dir_io, ur_file_io)
                For Each strEXISTING_FOLDER In ret_output.gFolderList
                    'List what resources to find
                    'No command line; hard-coded to use clipboard
                    trwPARMS = sln.RsrcCompile.wParm_Folder_Defaults(trwPARMS, strNEW_DATA_FOLDER, strEXISTING_FOLDER)
                    lstFILE = New sln.FileList()

                    'Compile what resources you have
                    lstFILE = sln.RsrcCompile.wFileList_Matches(lstFILE, trwPARMS, ur_dir_io, ur_path_io)

                    'Create output you want
                    'Call sln.ProcCompile.Wait_ToStartCopy(lstFILE, ur_thread)
                    ret_output.gFileIo = sln.CreateOutputCompile.Move_Files(ret_output.gFileIo, lstFILE)
                    ret_output.gText = sln.CreateOutputCompile.Output_FileList(ret_output.gText, lstFILE)
                Next strEXISTING_FOLDER

            Catch ex As System.Exception
                Call objERR_LIST.dError_Stack(ex)
            End Try

            If objERR_LIST.Found Then
                ret_output.gText.Clear().d(objERR_LIST.ToString)
            End If
        End Function 'Proc_Exec

        Public Class CombineTextOutput
            Public gFileIo As glbl.gFileIo
            Public gText As Strap
            Public gFolderList As Sdata

            Public Sub New(ur_text As Strap, ur_file_io As glbl.gFileIo, ur_folder_list As Sdata)
                Me.gText = ur_text
                Me.gFileIo = ur_file_io
                Me.gFolderList = ur_folder_list
            End Sub
        End Class 'CombineTextOutput
    End Class 'sub_main


    Public Class sln
        Const strLIT_STAR_DOT_HTML = "*.html"
        Const strLIT_TIDDLER_MOVE_FOLDER_REF_TXT = "tiddler_move_folder.ref.txt"

        Public Enum enmPCol
            new_data_folder
            existing_folder
        End Enum 'enmDCol

        Public Class ParmsRow
            Inherits TRow(Of enmPCol)
        End Class

        Public Enum enmFCol
            new_data_path
            existing_path
        End Enum

        Public Class FileRow
            Inherits TRow(Of enmFCol)
        End Class

        Public Class FileList
            Inherits Objlist(Of FileRow)
        End Class 'FileList

        Public Class CreateOutputCompile
            Public Shared Sub Wait_ToStartCopy(ur_files As FileList, ur_thread As glbl.gThread)
                If ur_files.Count > 0 Then
                    Call prv.Wait_FiveSeconds(ur_thread)
                End If
            End Sub 'Wait_FiveSeconds

            Public Shared Function Create_MoveFolder_Ref_File(ret_file_io As glbl.gFileIo, ur_parms_row As ParmsRow, ur_path_io As glbl.gPathIo) As glbl.gFileIo
                Create_MoveFolder_Ref_File = ret_file_io
                ret_file_io.WriteAllText(ur_path_io.Combine(ur_parms_row.v(enmPCol.new_data_folder), strLIT_TIDDLER_MOVE_FOLDER_REF_TXT), ur_parms_row.v(enmPCol.existing_folder))
            End Function 'Create_MoveFolder_Ref_File

            Public Shared Function Move_Files(ret_file_io As glbl.gFileIo, ur_files As FileList) As glbl.gFileIo
                Move_Files = ret_file_io
                For Each trwFILE In ur_files
                    ret_file_io.Move(trwFILE.v(enmFCol.new_data_path), trwFILE.v(enmFCol.new_data_path) & ".TDLY")
                    ret_file_io.Delete(trwFILE.v(enmFCol.existing_path))
                    ret_file_io.Move(trwFILE.v(enmFCol.new_data_path) & ".TDLY", trwFILE.v(enmFCol.existing_path))
                Next trwFILE
            End Function 'Move_Files

            Public Shared Function Output_FileList(ret_text As Strap, ur_files As FileList) As Strap
                Output_FileList = ret_text
                For Each trwFILE In ur_files
                    ret_text.dLine(Now.ToString("tt hh:mm:ss")).d(":").dS(trwFILE.v(enmFCol.existing_path))
                Next trwFILE
            End Function 'Output_FileList

            Private Class prv
                Public Shared Sub Wait_FiveSeconds(ur_thread As glbl.gThread)
                    ur_thread.Sleep(2000)
                End Sub 'Wait_FiveSeconds
            End Class 'prv
        End Class 'CreateOutputCompile

        Public Class RsrcCompile
            Public Shared Function wParm_Folder_Defaults(ret_parms_row As ParmsRow, ur_new_data_folder As String, ur_existing_folder As String) As ParmsRow
                wParm_Folder_Defaults = ret_parms_row
                ret_parms_row.v(enmPCol.new_data_folder) = ur_new_data_folder
                ret_parms_row.v(enmPCol.existing_folder) = ur_existing_folder
            End Function 'wParm_Folder_Defaults

            Public Shared Function wFolderEntry_Parameter(ret_output As Mx.sub_main.CombineTextOutput, ur_parms_row As ParmsRow, ur_dir_io As glbl.gDirIo, ur_file_io As glbl.gFileIo) As Mx.sub_main.CombineTextOutput
                wFolderEntry_Parameter = ret_output
                For Each kvpFILE_PATH In ur_dir_io.GetFiles(ur_parms_row.v(enmPCol.new_data_folder), strLIT_TIDDLER_MOVE_FOLDER_REF_TXT).kvp
                    Dim strNEW_FOLDER = ur_file_io.ReadAllText(kvpFILE_PATH.v)
                    Call ur_file_io.Delete(kvpFILE_PATH.v)
                    If ur_dir_io.GetSubFiles(strNEW_FOLDER, strLIT_STAR_DOT_HTML).Count > 0 AndAlso
                      ret_output.gFolderList.Contains(strNEW_FOLDER) = False Then
                        ret_output.gFolderList.d(strNEW_FOLDER)
                        ret_output.gText.dLine("Listening to:").dS(strNEW_FOLDER)
                    End If
                Next 'kvpFILE_PATH
            End Function 'wFolderEntry_Parameter

            Public Shared Function wFileList_Matches(ret_file_list As FileList, ur_parms_row As ParmsRow, ur_dir_io As glbl.gDirIo, ur_path_io As glbl.gPathIo) As FileList
                wFileList_Matches = ret_file_list
                Dim sdaNEW_DATA_FILES = ur_dir_io.GetFiles(ur_parms_row.v(enmPCol.new_data_folder), strLIT_STAR_DOT_HTML)
                Dim sdaEXISTING_FILES = ur_dir_io.GetSubFiles(ur_parms_row.v(enmPCol.existing_folder), strLIT_STAR_DOT_HTML)
                For Each kvpNEW_DATA In sdaNEW_DATA_FILES.kvp
                    For Each kvpEXISTING In sdaEXISTING_FILES.kvp
                        If AreEqual(ur_path_io.GetFileName(kvpEXISTING.v), ur_path_io.GetFileName(kvpNEW_DATA.v)) Then
                            Dim trwFILE = New FileRow()
                            trwFILE.v(enmFCol.new_data_path) = kvpNEW_DATA.v
                            trwFILE.v(enmFCol.existing_path) = kvpEXISTING.v
                            ret_file_list.Add(trwFILE)
                            Exit For
                        End If
                    Next kvpEXISTING
                Next kvpNEW_DATA
            End Function 'wFileList_Matches
        End Class 'RsrcCompile
    End Class 'sln


    Partial Public Class glbl
        Public Class gDiagnostics
            Public Function IsActiveWindow(ur_title As String) As Boolean
                IsActiveWindow = False
                For Each objCUR_PROC In System.Diagnostics.Process.GetProcesses()
                    If objCUR_PROC.MainWindowHandle <> 0 AndAlso
                      AreEqual(objCUR_PROC.MainWindowTitle, ur_title) Then
                        IsActiveWindow = True
                        Exit For
                    End If
                Next objCUR_PROC
            End Function 'IsActiveWindow
        End Class 'gDiagnostics

        Public Class gDirIo
            Public Function GetFiles(ur_path As String, ur_search_pattern As String) As Obalist(Of String)
                GetFiles = New Obalist(Of String)(System.IO.Directory.GetFiles(ur_path, ur_search_pattern, System.IO.SearchOption.TopDirectoryOnly))
            End Function

            Public Function GetSubFiles(ur_path As String, ur_search_pattern As String) As Obalist(Of String)
                GetSubFiles = New Obalist(Of String)(System.IO.Directory.GetFiles(ur_path, ur_search_pattern, System.IO.SearchOption.AllDirectories))
            End Function
        End Class 'gDirIo

        Public Class gEnvironment
            Public Function ExpandEnvironmentVariables(ur_path As String) As String
                ExpandEnvironmentVariables = System.Environment.ExpandEnvironmentVariables(ur_path)
            End Function
        End Class 'gEnvironment

        Public Class gFileIo
            Public Sub Delete(ur_path As String)
                System.IO.File.Delete(ur_path)
            End Sub

            Public Sub Move(ur_source_path As String, ur_dest_path As String)
                System.IO.File.Move(ur_source_path, ur_dest_path)
            End Sub

            Public Function ReadAllText(ur_file_path As String)
                ReadAllText = System.IO.File.ReadAllText(ur_file_path, Mx.gUTF8_FileEncoding())
            End Function

            Public Sub WriteAllText(ur_file_path As String, ur_text As String)
                Call System.IO.File.WriteAllText(ur_file_path, ur_text, Mx.gUTF8_FileEncoding())
            End Sub
        End Class 'gFileIo

        Public Class gPathIo
            Public Function Combine(ur_path_1 As String, ur_path_2 As String) As String
                Combine = System.IO.Path.Combine(ur_path_1, ur_path_2)
            End Function

            Public Function GetDirectoryName(ur_path As String) As String
                GetDirectoryName = System.IO.Path.GetDirectoryName(ur_path)
            End Function

            Public Function GetFileName(ur_path As String) As String
                GetFileName = System.IO.Path.GetFileName(ur_path)
            End Function
        End Class 'gPathIo

        Public Class gThread
            Public Sub Sleep(ur_milliseconds As Integer)
                System.Threading.Thread.Sleep(ur_milliseconds)
            End Sub
        End Class 'gThread
    End Class 'glbl
End Namespace 'Mx
